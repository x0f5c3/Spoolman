// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/spoolvendor"
	"spoolman-go/ent/vendorfield"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorFieldUpdate is the builder for updating VendorField entities.
type VendorFieldUpdate struct {
	config
	hooks    []Hook
	mutation *VendorFieldMutation
}

// Where appends a list predicates to the VendorFieldUpdate builder.
func (vfu *VendorFieldUpdate) Where(ps ...predicate.VendorField) *VendorFieldUpdate {
	vfu.mutation.Where(ps...)
	return vfu
}

// SetVendorID sets the "vendor_id" field.
func (vfu *VendorFieldUpdate) SetVendorID(i int) *VendorFieldUpdate {
	vfu.mutation.SetVendorID(i)
	return vfu
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (vfu *VendorFieldUpdate) SetNillableVendorID(i *int) *VendorFieldUpdate {
	if i != nil {
		vfu.SetVendorID(*i)
	}
	return vfu
}

// SetKey sets the "key" field.
func (vfu *VendorFieldUpdate) SetKey(s string) *VendorFieldUpdate {
	vfu.mutation.SetKey(s)
	return vfu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vfu *VendorFieldUpdate) SetNillableKey(s *string) *VendorFieldUpdate {
	if s != nil {
		vfu.SetKey(*s)
	}
	return vfu
}

// SetValue sets the "value" field.
func (vfu *VendorFieldUpdate) SetValue(s string) *VendorFieldUpdate {
	vfu.mutation.SetValue(s)
	return vfu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vfu *VendorFieldUpdate) SetNillableValue(s *string) *VendorFieldUpdate {
	if s != nil {
		vfu.SetValue(*s)
	}
	return vfu
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (vfu *VendorFieldUpdate) SetVendor(s *SpoolVendor) *VendorFieldUpdate {
	return vfu.SetVendorID(s.ID)
}

// Mutation returns the VendorFieldMutation object of the builder.
func (vfu *VendorFieldUpdate) Mutation() *VendorFieldMutation {
	return vfu.mutation
}

// ClearVendor clears the "vendor" edge to the SpoolVendor entity.
func (vfu *VendorFieldUpdate) ClearVendor() *VendorFieldUpdate {
	vfu.mutation.ClearVendor()
	return vfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vfu *VendorFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vfu.sqlSave, vfu.mutation, vfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vfu *VendorFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := vfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vfu *VendorFieldUpdate) Exec(ctx context.Context) error {
	_, err := vfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vfu *VendorFieldUpdate) ExecX(ctx context.Context) {
	if err := vfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vfu *VendorFieldUpdate) check() error {
	if v, ok := vfu.mutation.Key(); ok {
		if err := vendorfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "VendorField.key": %w`, err)}
		}
	}
	if vfu.mutation.VendorCleared() && len(vfu.mutation.VendorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VendorField.vendor"`)
	}
	return nil
}

func (vfu *VendorFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorfield.Table, vendorfield.Columns, sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt))
	if ps := vfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vfu.mutation.Key(); ok {
		_spec.SetField(vendorfield.FieldKey, field.TypeString, value)
	}
	if value, ok := vfu.mutation.Value(); ok {
		_spec.SetField(vendorfield.FieldValue, field.TypeString, value)
	}
	if vfu.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorfield.VendorTable,
			Columns: []string{vendorfield.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vfu.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorfield.VendorTable,
			Columns: []string{vendorfield.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vfu.mutation.done = true
	return n, nil
}

// VendorFieldUpdateOne is the builder for updating a single VendorField entity.
type VendorFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorFieldMutation
}

// SetVendorID sets the "vendor_id" field.
func (vfuo *VendorFieldUpdateOne) SetVendorID(i int) *VendorFieldUpdateOne {
	vfuo.mutation.SetVendorID(i)
	return vfuo
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (vfuo *VendorFieldUpdateOne) SetNillableVendorID(i *int) *VendorFieldUpdateOne {
	if i != nil {
		vfuo.SetVendorID(*i)
	}
	return vfuo
}

// SetKey sets the "key" field.
func (vfuo *VendorFieldUpdateOne) SetKey(s string) *VendorFieldUpdateOne {
	vfuo.mutation.SetKey(s)
	return vfuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vfuo *VendorFieldUpdateOne) SetNillableKey(s *string) *VendorFieldUpdateOne {
	if s != nil {
		vfuo.SetKey(*s)
	}
	return vfuo
}

// SetValue sets the "value" field.
func (vfuo *VendorFieldUpdateOne) SetValue(s string) *VendorFieldUpdateOne {
	vfuo.mutation.SetValue(s)
	return vfuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vfuo *VendorFieldUpdateOne) SetNillableValue(s *string) *VendorFieldUpdateOne {
	if s != nil {
		vfuo.SetValue(*s)
	}
	return vfuo
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (vfuo *VendorFieldUpdateOne) SetVendor(s *SpoolVendor) *VendorFieldUpdateOne {
	return vfuo.SetVendorID(s.ID)
}

// Mutation returns the VendorFieldMutation object of the builder.
func (vfuo *VendorFieldUpdateOne) Mutation() *VendorFieldMutation {
	return vfuo.mutation
}

// ClearVendor clears the "vendor" edge to the SpoolVendor entity.
func (vfuo *VendorFieldUpdateOne) ClearVendor() *VendorFieldUpdateOne {
	vfuo.mutation.ClearVendor()
	return vfuo
}

// Where appends a list predicates to the VendorFieldUpdate builder.
func (vfuo *VendorFieldUpdateOne) Where(ps ...predicate.VendorField) *VendorFieldUpdateOne {
	vfuo.mutation.Where(ps...)
	return vfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vfuo *VendorFieldUpdateOne) Select(field string, fields ...string) *VendorFieldUpdateOne {
	vfuo.fields = append([]string{field}, fields...)
	return vfuo
}

// Save executes the query and returns the updated VendorField entity.
func (vfuo *VendorFieldUpdateOne) Save(ctx context.Context) (*VendorField, error) {
	return withHooks(ctx, vfuo.sqlSave, vfuo.mutation, vfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vfuo *VendorFieldUpdateOne) SaveX(ctx context.Context) *VendorField {
	node, err := vfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vfuo *VendorFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := vfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vfuo *VendorFieldUpdateOne) ExecX(ctx context.Context) {
	if err := vfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vfuo *VendorFieldUpdateOne) check() error {
	if v, ok := vfuo.mutation.Key(); ok {
		if err := vendorfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "VendorField.key": %w`, err)}
		}
	}
	if vfuo.mutation.VendorCleared() && len(vfuo.mutation.VendorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VendorField.vendor"`)
	}
	return nil
}

func (vfuo *VendorFieldUpdateOne) sqlSave(ctx context.Context) (_node *VendorField, err error) {
	if err := vfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorfield.Table, vendorfield.Columns, sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt))
	id, ok := vfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VendorField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorfield.FieldID)
		for _, f := range fields {
			if !vendorfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vendorfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vfuo.mutation.Key(); ok {
		_spec.SetField(vendorfield.FieldKey, field.TypeString, value)
	}
	if value, ok := vfuo.mutation.Value(); ok {
		_spec.SetField(vendorfield.FieldValue, field.TypeString, value)
	}
	if vfuo.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorfield.VendorTable,
			Columns: []string{vendorfield.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vfuo.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorfield.VendorTable,
			Columns: []string{vendorfield.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VendorField{config: vfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vfuo.mutation.done = true
	return _node, nil
}
