// Code generated by ent, DO NOT EDIT.

package filament

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the filament type in the database.
	Label = "filament"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRegistered holds the string denoting the registered field in the database.
	FieldRegistered = "registered"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVendorID holds the string denoting the vendor_id field in the database.
	FieldVendorID = "vendor_id"
	// FieldMaterial holds the string denoting the material field in the database.
	FieldMaterial = "material"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDensity holds the string denoting the density field in the database.
	FieldDensity = "density"
	// FieldDiameter holds the string denoting the diameter field in the database.
	FieldDiameter = "diameter"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldSpoolWeight holds the string denoting the spool_weight field in the database.
	FieldSpoolWeight = "spool_weight"
	// FieldArticleNumber holds the string denoting the article_number field in the database.
	FieldArticleNumber = "article_number"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldSettingsExtruderTemp holds the string denoting the settings_extruder_temp field in the database.
	FieldSettingsExtruderTemp = "settings_extruder_temp"
	// FieldSettingsBedTemp holds the string denoting the settings_bed_temp field in the database.
	FieldSettingsBedTemp = "settings_bed_temp"
	// FieldColorHex holds the string denoting the color_hex field in the database.
	FieldColorHex = "color_hex"
	// FieldMultiColorHexes holds the string denoting the multi_color_hexes field in the database.
	FieldMultiColorHexes = "multi_color_hexes"
	// FieldMultiColorDirection holds the string denoting the multi_color_direction field in the database.
	FieldMultiColorDirection = "multi_color_direction"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// EdgeVendor holds the string denoting the vendor edge name in mutations.
	EdgeVendor = "vendor"
	// EdgeSpools holds the string denoting the spools edge name in mutations.
	EdgeSpools = "spools"
	// EdgeExtra holds the string denoting the extra edge name in mutations.
	EdgeExtra = "extra"
	// Table holds the table name of the filament in the database.
	Table = "filaments"
	// VendorTable is the table that holds the vendor relation/edge.
	VendorTable = "filaments"
	// VendorInverseTable is the table name for the SpoolVendor entity.
	// It exists in this package in order to avoid circular dependency with the "spoolvendor" package.
	VendorInverseTable = "spool_vendors"
	// VendorColumn is the table column denoting the vendor relation/edge.
	VendorColumn = "vendor_id"
	// SpoolsTable is the table that holds the spools relation/edge.
	SpoolsTable = "spools"
	// SpoolsInverseTable is the table name for the Spool entity.
	// It exists in this package in order to avoid circular dependency with the "spool" package.
	SpoolsInverseTable = "spools"
	// SpoolsColumn is the table column denoting the spools relation/edge.
	SpoolsColumn = "filament_id"
	// ExtraTable is the table that holds the extra relation/edge.
	ExtraTable = "filament_fields"
	// ExtraInverseTable is the table name for the FilamentField entity.
	// It exists in this package in order to avoid circular dependency with the "filamentfield" package.
	ExtraInverseTable = "filament_fields"
	// ExtraColumn is the table column denoting the extra relation/edge.
	ExtraColumn = "filament_id"
)

// Columns holds all SQL columns for filament fields.
var Columns = []string{
	FieldID,
	FieldRegistered,
	FieldName,
	FieldVendorID,
	FieldMaterial,
	FieldPrice,
	FieldDensity,
	FieldDiameter,
	FieldWeight,
	FieldSpoolWeight,
	FieldArticleNumber,
	FieldComment,
	FieldSettingsExtruderTemp,
	FieldSettingsBedTemp,
	FieldColorHex,
	FieldMultiColorHexes,
	FieldMultiColorDirection,
	FieldExternalID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// MaterialValidator is a validator for the "material" field. It is called by the builders before save.
	MaterialValidator func(string) error
	// ArticleNumberValidator is a validator for the "article_number" field. It is called by the builders before save.
	ArticleNumberValidator func(string) error
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// ColorHexValidator is a validator for the "color_hex" field. It is called by the builders before save.
	ColorHexValidator func(string) error
	// MultiColorHexesValidator is a validator for the "multi_color_hexes" field. It is called by the builders before save.
	MultiColorHexesValidator func(string) error
	// MultiColorDirectionValidator is a validator for the "multi_color_direction" field. It is called by the builders before save.
	MultiColorDirectionValidator func(string) error
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Filament queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRegistered orders the results by the registered field.
func ByRegistered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistered, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVendorID orders the results by the vendor_id field.
func ByVendorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorID, opts...).ToFunc()
}

// ByMaterial orders the results by the material field.
func ByMaterial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaterial, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDensity orders the results by the density field.
func ByDensity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDensity, opts...).ToFunc()
}

// ByDiameter orders the results by the diameter field.
func ByDiameter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiameter, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// BySpoolWeight orders the results by the spool_weight field.
func BySpoolWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpoolWeight, opts...).ToFunc()
}

// ByArticleNumber orders the results by the article_number field.
func ByArticleNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArticleNumber, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// BySettingsExtruderTemp orders the results by the settings_extruder_temp field.
func BySettingsExtruderTemp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingsExtruderTemp, opts...).ToFunc()
}

// BySettingsBedTemp orders the results by the settings_bed_temp field.
func BySettingsBedTemp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingsBedTemp, opts...).ToFunc()
}

// ByColorHex orders the results by the color_hex field.
func ByColorHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorHex, opts...).ToFunc()
}

// ByMultiColorHexes orders the results by the multi_color_hexes field.
func ByMultiColorHexes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMultiColorHexes, opts...).ToFunc()
}

// ByMultiColorDirection orders the results by the multi_color_direction field.
func ByMultiColorDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMultiColorDirection, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByVendorField orders the results by vendor field.
func ByVendorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorStep(), sql.OrderByField(field, opts...))
	}
}

// BySpoolsCount orders the results by spools count.
func BySpoolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSpoolsStep(), opts...)
	}
}

// BySpools orders the results by spools terms.
func BySpools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSpoolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExtraCount orders the results by extra count.
func ByExtraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExtraStep(), opts...)
	}
}

// ByExtra orders the results by extra terms.
func ByExtra(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVendorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
	)
}
func newSpoolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SpoolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SpoolsTable, SpoolsColumn),
	)
}
func newExtraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExtraTable, ExtraColumn),
	)
}
