// Code generated by ent, DO NOT EDIT.

package filament

import (
	"spoolman-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldID, id))
}

// Registered applies equality check predicate on the "registered" field. It's identical to RegisteredEQ.
func Registered(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldRegistered, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldName, v))
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldVendorID, v))
}

// Material applies equality check predicate on the "material" field. It's identical to MaterialEQ.
func Material(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMaterial, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldPrice, v))
}

// Density applies equality check predicate on the "density" field. It's identical to DensityEQ.
func Density(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldDensity, v))
}

// Diameter applies equality check predicate on the "diameter" field. It's identical to DiameterEQ.
func Diameter(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldDiameter, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldWeight, v))
}

// SpoolWeight applies equality check predicate on the "spool_weight" field. It's identical to SpoolWeightEQ.
func SpoolWeight(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSpoolWeight, v))
}

// ArticleNumber applies equality check predicate on the "article_number" field. It's identical to ArticleNumberEQ.
func ArticleNumber(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldArticleNumber, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldComment, v))
}

// SettingsExtruderTemp applies equality check predicate on the "settings_extruder_temp" field. It's identical to SettingsExtruderTempEQ.
func SettingsExtruderTemp(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSettingsExtruderTemp, v))
}

// SettingsBedTemp applies equality check predicate on the "settings_bed_temp" field. It's identical to SettingsBedTempEQ.
func SettingsBedTemp(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSettingsBedTemp, v))
}

// ColorHex applies equality check predicate on the "color_hex" field. It's identical to ColorHexEQ.
func ColorHex(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldColorHex, v))
}

// MultiColorHexes applies equality check predicate on the "multi_color_hexes" field. It's identical to MultiColorHexesEQ.
func MultiColorHexes(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMultiColorHexes, v))
}

// MultiColorDirection applies equality check predicate on the "multi_color_direction" field. It's identical to MultiColorDirectionEQ.
func MultiColorDirection(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMultiColorDirection, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldExternalID, v))
}

// RegisteredEQ applies the EQ predicate on the "registered" field.
func RegisteredEQ(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldRegistered, v))
}

// RegisteredNEQ applies the NEQ predicate on the "registered" field.
func RegisteredNEQ(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldRegistered, v))
}

// RegisteredIn applies the In predicate on the "registered" field.
func RegisteredIn(vs ...time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldRegistered, vs...))
}

// RegisteredNotIn applies the NotIn predicate on the "registered" field.
func RegisteredNotIn(vs ...time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldRegistered, vs...))
}

// RegisteredGT applies the GT predicate on the "registered" field.
func RegisteredGT(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldRegistered, v))
}

// RegisteredGTE applies the GTE predicate on the "registered" field.
func RegisteredGTE(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldRegistered, v))
}

// RegisteredLT applies the LT predicate on the "registered" field.
func RegisteredLT(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldRegistered, v))
}

// RegisteredLTE applies the LTE predicate on the "registered" field.
func RegisteredLTE(v time.Time) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldRegistered, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldName, v))
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldVendorID, v))
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldVendorID, v))
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldVendorID, vs...))
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldVendorID, vs...))
}

// VendorIDIsNil applies the IsNil predicate on the "vendor_id" field.
func VendorIDIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldVendorID))
}

// VendorIDNotNil applies the NotNil predicate on the "vendor_id" field.
func VendorIDNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldVendorID))
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMaterial, v))
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldMaterial, v))
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldMaterial, vs...))
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldMaterial, vs...))
}

// MaterialGT applies the GT predicate on the "material" field.
func MaterialGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldMaterial, v))
}

// MaterialGTE applies the GTE predicate on the "material" field.
func MaterialGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldMaterial, v))
}

// MaterialLT applies the LT predicate on the "material" field.
func MaterialLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldMaterial, v))
}

// MaterialLTE applies the LTE predicate on the "material" field.
func MaterialLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldMaterial, v))
}

// MaterialContains applies the Contains predicate on the "material" field.
func MaterialContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldMaterial, v))
}

// MaterialHasPrefix applies the HasPrefix predicate on the "material" field.
func MaterialHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldMaterial, v))
}

// MaterialHasSuffix applies the HasSuffix predicate on the "material" field.
func MaterialHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldMaterial, v))
}

// MaterialIsNil applies the IsNil predicate on the "material" field.
func MaterialIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldMaterial))
}

// MaterialNotNil applies the NotNil predicate on the "material" field.
func MaterialNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldMaterial))
}

// MaterialEqualFold applies the EqualFold predicate on the "material" field.
func MaterialEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldMaterial, v))
}

// MaterialContainsFold applies the ContainsFold predicate on the "material" field.
func MaterialContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldMaterial, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldPrice))
}

// DensityEQ applies the EQ predicate on the "density" field.
func DensityEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldDensity, v))
}

// DensityNEQ applies the NEQ predicate on the "density" field.
func DensityNEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldDensity, v))
}

// DensityIn applies the In predicate on the "density" field.
func DensityIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldDensity, vs...))
}

// DensityNotIn applies the NotIn predicate on the "density" field.
func DensityNotIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldDensity, vs...))
}

// DensityGT applies the GT predicate on the "density" field.
func DensityGT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldDensity, v))
}

// DensityGTE applies the GTE predicate on the "density" field.
func DensityGTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldDensity, v))
}

// DensityLT applies the LT predicate on the "density" field.
func DensityLT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldDensity, v))
}

// DensityLTE applies the LTE predicate on the "density" field.
func DensityLTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldDensity, v))
}

// DiameterEQ applies the EQ predicate on the "diameter" field.
func DiameterEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldDiameter, v))
}

// DiameterNEQ applies the NEQ predicate on the "diameter" field.
func DiameterNEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldDiameter, v))
}

// DiameterIn applies the In predicate on the "diameter" field.
func DiameterIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldDiameter, vs...))
}

// DiameterNotIn applies the NotIn predicate on the "diameter" field.
func DiameterNotIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldDiameter, vs...))
}

// DiameterGT applies the GT predicate on the "diameter" field.
func DiameterGT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldDiameter, v))
}

// DiameterGTE applies the GTE predicate on the "diameter" field.
func DiameterGTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldDiameter, v))
}

// DiameterLT applies the LT predicate on the "diameter" field.
func DiameterLT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldDiameter, v))
}

// DiameterLTE applies the LTE predicate on the "diameter" field.
func DiameterLTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldDiameter, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldWeight))
}

// SpoolWeightEQ applies the EQ predicate on the "spool_weight" field.
func SpoolWeightEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSpoolWeight, v))
}

// SpoolWeightNEQ applies the NEQ predicate on the "spool_weight" field.
func SpoolWeightNEQ(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldSpoolWeight, v))
}

// SpoolWeightIn applies the In predicate on the "spool_weight" field.
func SpoolWeightIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldSpoolWeight, vs...))
}

// SpoolWeightNotIn applies the NotIn predicate on the "spool_weight" field.
func SpoolWeightNotIn(vs ...float32) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldSpoolWeight, vs...))
}

// SpoolWeightGT applies the GT predicate on the "spool_weight" field.
func SpoolWeightGT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldSpoolWeight, v))
}

// SpoolWeightGTE applies the GTE predicate on the "spool_weight" field.
func SpoolWeightGTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldSpoolWeight, v))
}

// SpoolWeightLT applies the LT predicate on the "spool_weight" field.
func SpoolWeightLT(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldSpoolWeight, v))
}

// SpoolWeightLTE applies the LTE predicate on the "spool_weight" field.
func SpoolWeightLTE(v float32) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldSpoolWeight, v))
}

// SpoolWeightIsNil applies the IsNil predicate on the "spool_weight" field.
func SpoolWeightIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldSpoolWeight))
}

// SpoolWeightNotNil applies the NotNil predicate on the "spool_weight" field.
func SpoolWeightNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldSpoolWeight))
}

// ArticleNumberEQ applies the EQ predicate on the "article_number" field.
func ArticleNumberEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldArticleNumber, v))
}

// ArticleNumberNEQ applies the NEQ predicate on the "article_number" field.
func ArticleNumberNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldArticleNumber, v))
}

// ArticleNumberIn applies the In predicate on the "article_number" field.
func ArticleNumberIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldArticleNumber, vs...))
}

// ArticleNumberNotIn applies the NotIn predicate on the "article_number" field.
func ArticleNumberNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldArticleNumber, vs...))
}

// ArticleNumberGT applies the GT predicate on the "article_number" field.
func ArticleNumberGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldArticleNumber, v))
}

// ArticleNumberGTE applies the GTE predicate on the "article_number" field.
func ArticleNumberGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldArticleNumber, v))
}

// ArticleNumberLT applies the LT predicate on the "article_number" field.
func ArticleNumberLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldArticleNumber, v))
}

// ArticleNumberLTE applies the LTE predicate on the "article_number" field.
func ArticleNumberLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldArticleNumber, v))
}

// ArticleNumberContains applies the Contains predicate on the "article_number" field.
func ArticleNumberContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldArticleNumber, v))
}

// ArticleNumberHasPrefix applies the HasPrefix predicate on the "article_number" field.
func ArticleNumberHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldArticleNumber, v))
}

// ArticleNumberHasSuffix applies the HasSuffix predicate on the "article_number" field.
func ArticleNumberHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldArticleNumber, v))
}

// ArticleNumberIsNil applies the IsNil predicate on the "article_number" field.
func ArticleNumberIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldArticleNumber))
}

// ArticleNumberNotNil applies the NotNil predicate on the "article_number" field.
func ArticleNumberNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldArticleNumber))
}

// ArticleNumberEqualFold applies the EqualFold predicate on the "article_number" field.
func ArticleNumberEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldArticleNumber, v))
}

// ArticleNumberContainsFold applies the ContainsFold predicate on the "article_number" field.
func ArticleNumberContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldArticleNumber, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldComment, v))
}

// SettingsExtruderTempEQ applies the EQ predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempNEQ applies the NEQ predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempNEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempIn applies the In predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldSettingsExtruderTemp, vs...))
}

// SettingsExtruderTempNotIn applies the NotIn predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempNotIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldSettingsExtruderTemp, vs...))
}

// SettingsExtruderTempGT applies the GT predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempGT(v int) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempGTE applies the GTE predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempGTE(v int) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempLT applies the LT predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempLT(v int) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempLTE applies the LTE predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempLTE(v int) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldSettingsExtruderTemp, v))
}

// SettingsExtruderTempIsNil applies the IsNil predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldSettingsExtruderTemp))
}

// SettingsExtruderTempNotNil applies the NotNil predicate on the "settings_extruder_temp" field.
func SettingsExtruderTempNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldSettingsExtruderTemp))
}

// SettingsBedTempEQ applies the EQ predicate on the "settings_bed_temp" field.
func SettingsBedTempEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldSettingsBedTemp, v))
}

// SettingsBedTempNEQ applies the NEQ predicate on the "settings_bed_temp" field.
func SettingsBedTempNEQ(v int) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldSettingsBedTemp, v))
}

// SettingsBedTempIn applies the In predicate on the "settings_bed_temp" field.
func SettingsBedTempIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldSettingsBedTemp, vs...))
}

// SettingsBedTempNotIn applies the NotIn predicate on the "settings_bed_temp" field.
func SettingsBedTempNotIn(vs ...int) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldSettingsBedTemp, vs...))
}

// SettingsBedTempGT applies the GT predicate on the "settings_bed_temp" field.
func SettingsBedTempGT(v int) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldSettingsBedTemp, v))
}

// SettingsBedTempGTE applies the GTE predicate on the "settings_bed_temp" field.
func SettingsBedTempGTE(v int) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldSettingsBedTemp, v))
}

// SettingsBedTempLT applies the LT predicate on the "settings_bed_temp" field.
func SettingsBedTempLT(v int) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldSettingsBedTemp, v))
}

// SettingsBedTempLTE applies the LTE predicate on the "settings_bed_temp" field.
func SettingsBedTempLTE(v int) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldSettingsBedTemp, v))
}

// SettingsBedTempIsNil applies the IsNil predicate on the "settings_bed_temp" field.
func SettingsBedTempIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldSettingsBedTemp))
}

// SettingsBedTempNotNil applies the NotNil predicate on the "settings_bed_temp" field.
func SettingsBedTempNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldSettingsBedTemp))
}

// ColorHexEQ applies the EQ predicate on the "color_hex" field.
func ColorHexEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldColorHex, v))
}

// ColorHexNEQ applies the NEQ predicate on the "color_hex" field.
func ColorHexNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldColorHex, v))
}

// ColorHexIn applies the In predicate on the "color_hex" field.
func ColorHexIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldColorHex, vs...))
}

// ColorHexNotIn applies the NotIn predicate on the "color_hex" field.
func ColorHexNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldColorHex, vs...))
}

// ColorHexGT applies the GT predicate on the "color_hex" field.
func ColorHexGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldColorHex, v))
}

// ColorHexGTE applies the GTE predicate on the "color_hex" field.
func ColorHexGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldColorHex, v))
}

// ColorHexLT applies the LT predicate on the "color_hex" field.
func ColorHexLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldColorHex, v))
}

// ColorHexLTE applies the LTE predicate on the "color_hex" field.
func ColorHexLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldColorHex, v))
}

// ColorHexContains applies the Contains predicate on the "color_hex" field.
func ColorHexContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldColorHex, v))
}

// ColorHexHasPrefix applies the HasPrefix predicate on the "color_hex" field.
func ColorHexHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldColorHex, v))
}

// ColorHexHasSuffix applies the HasSuffix predicate on the "color_hex" field.
func ColorHexHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldColorHex, v))
}

// ColorHexIsNil applies the IsNil predicate on the "color_hex" field.
func ColorHexIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldColorHex))
}

// ColorHexNotNil applies the NotNil predicate on the "color_hex" field.
func ColorHexNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldColorHex))
}

// ColorHexEqualFold applies the EqualFold predicate on the "color_hex" field.
func ColorHexEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldColorHex, v))
}

// ColorHexContainsFold applies the ContainsFold predicate on the "color_hex" field.
func ColorHexContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldColorHex, v))
}

// MultiColorHexesEQ applies the EQ predicate on the "multi_color_hexes" field.
func MultiColorHexesEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMultiColorHexes, v))
}

// MultiColorHexesNEQ applies the NEQ predicate on the "multi_color_hexes" field.
func MultiColorHexesNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldMultiColorHexes, v))
}

// MultiColorHexesIn applies the In predicate on the "multi_color_hexes" field.
func MultiColorHexesIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldMultiColorHexes, vs...))
}

// MultiColorHexesNotIn applies the NotIn predicate on the "multi_color_hexes" field.
func MultiColorHexesNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldMultiColorHexes, vs...))
}

// MultiColorHexesGT applies the GT predicate on the "multi_color_hexes" field.
func MultiColorHexesGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldMultiColorHexes, v))
}

// MultiColorHexesGTE applies the GTE predicate on the "multi_color_hexes" field.
func MultiColorHexesGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldMultiColorHexes, v))
}

// MultiColorHexesLT applies the LT predicate on the "multi_color_hexes" field.
func MultiColorHexesLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldMultiColorHexes, v))
}

// MultiColorHexesLTE applies the LTE predicate on the "multi_color_hexes" field.
func MultiColorHexesLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldMultiColorHexes, v))
}

// MultiColorHexesContains applies the Contains predicate on the "multi_color_hexes" field.
func MultiColorHexesContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldMultiColorHexes, v))
}

// MultiColorHexesHasPrefix applies the HasPrefix predicate on the "multi_color_hexes" field.
func MultiColorHexesHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldMultiColorHexes, v))
}

// MultiColorHexesHasSuffix applies the HasSuffix predicate on the "multi_color_hexes" field.
func MultiColorHexesHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldMultiColorHexes, v))
}

// MultiColorHexesIsNil applies the IsNil predicate on the "multi_color_hexes" field.
func MultiColorHexesIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldMultiColorHexes))
}

// MultiColorHexesNotNil applies the NotNil predicate on the "multi_color_hexes" field.
func MultiColorHexesNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldMultiColorHexes))
}

// MultiColorHexesEqualFold applies the EqualFold predicate on the "multi_color_hexes" field.
func MultiColorHexesEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldMultiColorHexes, v))
}

// MultiColorHexesContainsFold applies the ContainsFold predicate on the "multi_color_hexes" field.
func MultiColorHexesContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldMultiColorHexes, v))
}

// MultiColorDirectionEQ applies the EQ predicate on the "multi_color_direction" field.
func MultiColorDirectionEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldMultiColorDirection, v))
}

// MultiColorDirectionNEQ applies the NEQ predicate on the "multi_color_direction" field.
func MultiColorDirectionNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldMultiColorDirection, v))
}

// MultiColorDirectionIn applies the In predicate on the "multi_color_direction" field.
func MultiColorDirectionIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldMultiColorDirection, vs...))
}

// MultiColorDirectionNotIn applies the NotIn predicate on the "multi_color_direction" field.
func MultiColorDirectionNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldMultiColorDirection, vs...))
}

// MultiColorDirectionGT applies the GT predicate on the "multi_color_direction" field.
func MultiColorDirectionGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldMultiColorDirection, v))
}

// MultiColorDirectionGTE applies the GTE predicate on the "multi_color_direction" field.
func MultiColorDirectionGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldMultiColorDirection, v))
}

// MultiColorDirectionLT applies the LT predicate on the "multi_color_direction" field.
func MultiColorDirectionLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldMultiColorDirection, v))
}

// MultiColorDirectionLTE applies the LTE predicate on the "multi_color_direction" field.
func MultiColorDirectionLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldMultiColorDirection, v))
}

// MultiColorDirectionContains applies the Contains predicate on the "multi_color_direction" field.
func MultiColorDirectionContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldMultiColorDirection, v))
}

// MultiColorDirectionHasPrefix applies the HasPrefix predicate on the "multi_color_direction" field.
func MultiColorDirectionHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldMultiColorDirection, v))
}

// MultiColorDirectionHasSuffix applies the HasSuffix predicate on the "multi_color_direction" field.
func MultiColorDirectionHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldMultiColorDirection, v))
}

// MultiColorDirectionIsNil applies the IsNil predicate on the "multi_color_direction" field.
func MultiColorDirectionIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldMultiColorDirection))
}

// MultiColorDirectionNotNil applies the NotNil predicate on the "multi_color_direction" field.
func MultiColorDirectionNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldMultiColorDirection))
}

// MultiColorDirectionEqualFold applies the EqualFold predicate on the "multi_color_direction" field.
func MultiColorDirectionEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldMultiColorDirection, v))
}

// MultiColorDirectionContainsFold applies the ContainsFold predicate on the "multi_color_direction" field.
func MultiColorDirectionContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldMultiColorDirection, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Filament {
	return predicate.Filament(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Filament {
	return predicate.Filament(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Filament {
	return predicate.Filament(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Filament {
	return predicate.Filament(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.Filament {
	return predicate.Filament(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.Filament {
	return predicate.Filament(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Filament {
	return predicate.Filament(sql.FieldContainsFold(FieldExternalID, v))
}

// HasVendor applies the HasEdge predicate on the "vendor" edge.
func HasVendor() predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorWith applies the HasEdge predicate on the "vendor" edge with a given conditions (other predicates).
func HasVendorWith(preds ...predicate.SpoolVendor) predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := newVendorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpools applies the HasEdge predicate on the "spools" edge.
func HasSpools() predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpoolsTable, SpoolsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpoolsWith applies the HasEdge predicate on the "spools" edge with a given conditions (other predicates).
func HasSpoolsWith(preds ...predicate.Spool) predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := newSpoolsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtra applies the HasEdge predicate on the "extra" edge.
func HasExtra() predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExtraTable, ExtraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtraWith applies the HasEdge predicate on the "extra" edge with a given conditions (other predicates).
func HasExtraWith(preds ...predicate.FilamentField) predicate.Filament {
	return predicate.Filament(func(s *sql.Selector) {
		step := newExtraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Filament) predicate.Filament {
	return predicate.Filament(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Filament) predicate.Filament {
	return predicate.Filament(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Filament) predicate.Filament {
	return predicate.Filament(sql.NotPredicates(p))
}
