// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"
	"spoolman-go/ent/spool"
	"spoolman-go/ent/spoolvendor"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilamentCreate is the builder for creating a Filament entity.
type FilamentCreate struct {
	config
	mutation *FilamentMutation
	hooks    []Hook
}

// SetRegistered sets the "registered" field.
func (fc *FilamentCreate) SetRegistered(t time.Time) *FilamentCreate {
	fc.mutation.SetRegistered(t)
	return fc
}

// SetName sets the "name" field.
func (fc *FilamentCreate) SetName(s string) *FilamentCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableName(s *string) *FilamentCreate {
	if s != nil {
		fc.SetName(*s)
	}
	return fc
}

// SetVendorID sets the "vendor_id" field.
func (fc *FilamentCreate) SetVendorID(i int) *FilamentCreate {
	fc.mutation.SetVendorID(i)
	return fc
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableVendorID(i *int) *FilamentCreate {
	if i != nil {
		fc.SetVendorID(*i)
	}
	return fc
}

// SetMaterial sets the "material" field.
func (fc *FilamentCreate) SetMaterial(s string) *FilamentCreate {
	fc.mutation.SetMaterial(s)
	return fc
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableMaterial(s *string) *FilamentCreate {
	if s != nil {
		fc.SetMaterial(*s)
	}
	return fc
}

// SetPrice sets the "price" field.
func (fc *FilamentCreate) SetPrice(f float32) *FilamentCreate {
	fc.mutation.SetPrice(f)
	return fc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (fc *FilamentCreate) SetNillablePrice(f *float32) *FilamentCreate {
	if f != nil {
		fc.SetPrice(*f)
	}
	return fc
}

// SetDensity sets the "density" field.
func (fc *FilamentCreate) SetDensity(f float32) *FilamentCreate {
	fc.mutation.SetDensity(f)
	return fc
}

// SetDiameter sets the "diameter" field.
func (fc *FilamentCreate) SetDiameter(f float32) *FilamentCreate {
	fc.mutation.SetDiameter(f)
	return fc
}

// SetWeight sets the "weight" field.
func (fc *FilamentCreate) SetWeight(f float32) *FilamentCreate {
	fc.mutation.SetWeight(f)
	return fc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableWeight(f *float32) *FilamentCreate {
	if f != nil {
		fc.SetWeight(*f)
	}
	return fc
}

// SetSpoolWeight sets the "spool_weight" field.
func (fc *FilamentCreate) SetSpoolWeight(f float32) *FilamentCreate {
	fc.mutation.SetSpoolWeight(f)
	return fc
}

// SetNillableSpoolWeight sets the "spool_weight" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableSpoolWeight(f *float32) *FilamentCreate {
	if f != nil {
		fc.SetSpoolWeight(*f)
	}
	return fc
}

// SetArticleNumber sets the "article_number" field.
func (fc *FilamentCreate) SetArticleNumber(s string) *FilamentCreate {
	fc.mutation.SetArticleNumber(s)
	return fc
}

// SetNillableArticleNumber sets the "article_number" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableArticleNumber(s *string) *FilamentCreate {
	if s != nil {
		fc.SetArticleNumber(*s)
	}
	return fc
}

// SetComment sets the "comment" field.
func (fc *FilamentCreate) SetComment(s string) *FilamentCreate {
	fc.mutation.SetComment(s)
	return fc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableComment(s *string) *FilamentCreate {
	if s != nil {
		fc.SetComment(*s)
	}
	return fc
}

// SetSettingsExtruderTemp sets the "settings_extruder_temp" field.
func (fc *FilamentCreate) SetSettingsExtruderTemp(i int) *FilamentCreate {
	fc.mutation.SetSettingsExtruderTemp(i)
	return fc
}

// SetNillableSettingsExtruderTemp sets the "settings_extruder_temp" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableSettingsExtruderTemp(i *int) *FilamentCreate {
	if i != nil {
		fc.SetSettingsExtruderTemp(*i)
	}
	return fc
}

// SetSettingsBedTemp sets the "settings_bed_temp" field.
func (fc *FilamentCreate) SetSettingsBedTemp(i int) *FilamentCreate {
	fc.mutation.SetSettingsBedTemp(i)
	return fc
}

// SetNillableSettingsBedTemp sets the "settings_bed_temp" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableSettingsBedTemp(i *int) *FilamentCreate {
	if i != nil {
		fc.SetSettingsBedTemp(*i)
	}
	return fc
}

// SetColorHex sets the "color_hex" field.
func (fc *FilamentCreate) SetColorHex(s string) *FilamentCreate {
	fc.mutation.SetColorHex(s)
	return fc
}

// SetNillableColorHex sets the "color_hex" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableColorHex(s *string) *FilamentCreate {
	if s != nil {
		fc.SetColorHex(*s)
	}
	return fc
}

// SetMultiColorHexes sets the "multi_color_hexes" field.
func (fc *FilamentCreate) SetMultiColorHexes(s string) *FilamentCreate {
	fc.mutation.SetMultiColorHexes(s)
	return fc
}

// SetNillableMultiColorHexes sets the "multi_color_hexes" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableMultiColorHexes(s *string) *FilamentCreate {
	if s != nil {
		fc.SetMultiColorHexes(*s)
	}
	return fc
}

// SetMultiColorDirection sets the "multi_color_direction" field.
func (fc *FilamentCreate) SetMultiColorDirection(s string) *FilamentCreate {
	fc.mutation.SetMultiColorDirection(s)
	return fc
}

// SetNillableMultiColorDirection sets the "multi_color_direction" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableMultiColorDirection(s *string) *FilamentCreate {
	if s != nil {
		fc.SetMultiColorDirection(*s)
	}
	return fc
}

// SetExternalID sets the "external_id" field.
func (fc *FilamentCreate) SetExternalID(s string) *FilamentCreate {
	fc.mutation.SetExternalID(s)
	return fc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fc *FilamentCreate) SetNillableExternalID(s *string) *FilamentCreate {
	if s != nil {
		fc.SetExternalID(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FilamentCreate) SetID(i int) *FilamentCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (fc *FilamentCreate) SetVendor(s *SpoolVendor) *FilamentCreate {
	return fc.SetVendorID(s.ID)
}

// AddSpoolIDs adds the "spools" edge to the Spool entity by IDs.
func (fc *FilamentCreate) AddSpoolIDs(ids ...int) *FilamentCreate {
	fc.mutation.AddSpoolIDs(ids...)
	return fc
}

// AddSpools adds the "spools" edges to the Spool entity.
func (fc *FilamentCreate) AddSpools(s ...*Spool) *FilamentCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fc.AddSpoolIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the FilamentField entity by IDs.
func (fc *FilamentCreate) AddExtraIDs(ids ...int) *FilamentCreate {
	fc.mutation.AddExtraIDs(ids...)
	return fc
}

// AddExtra adds the "extra" edges to the FilamentField entity.
func (fc *FilamentCreate) AddExtra(f ...*FilamentField) *FilamentCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddExtraIDs(ids...)
}

// Mutation returns the FilamentMutation object of the builder.
func (fc *FilamentCreate) Mutation() *FilamentMutation {
	return fc.mutation
}

// Save creates the Filament in the database.
func (fc *FilamentCreate) Save(ctx context.Context) (*Filament, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilamentCreate) SaveX(ctx context.Context) *Filament {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilamentCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilamentCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilamentCreate) check() error {
	if _, ok := fc.mutation.Registered(); !ok {
		return &ValidationError{Name: "registered", err: errors.New(`ent: missing required field "Filament.registered"`)}
	}
	if v, ok := fc.mutation.Name(); ok {
		if err := filament.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filament.name": %w`, err)}
		}
	}
	if v, ok := fc.mutation.Material(); ok {
		if err := filament.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Filament.material": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Density(); !ok {
		return &ValidationError{Name: "density", err: errors.New(`ent: missing required field "Filament.density"`)}
	}
	if _, ok := fc.mutation.Diameter(); !ok {
		return &ValidationError{Name: "diameter", err: errors.New(`ent: missing required field "Filament.diameter"`)}
	}
	if v, ok := fc.mutation.ArticleNumber(); ok {
		if err := filament.ArticleNumberValidator(v); err != nil {
			return &ValidationError{Name: "article_number", err: fmt.Errorf(`ent: validator failed for field "Filament.article_number": %w`, err)}
		}
	}
	if v, ok := fc.mutation.Comment(); ok {
		if err := filament.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Filament.comment": %w`, err)}
		}
	}
	if v, ok := fc.mutation.ColorHex(); ok {
		if err := filament.ColorHexValidator(v); err != nil {
			return &ValidationError{Name: "color_hex", err: fmt.Errorf(`ent: validator failed for field "Filament.color_hex": %w`, err)}
		}
	}
	if v, ok := fc.mutation.MultiColorHexes(); ok {
		if err := filament.MultiColorHexesValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_hexes", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_hexes": %w`, err)}
		}
	}
	if v, ok := fc.mutation.MultiColorDirection(); ok {
		if err := filament.MultiColorDirectionValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_direction", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_direction": %w`, err)}
		}
	}
	if v, ok := fc.mutation.ExternalID(); ok {
		if err := filament.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Filament.external_id": %w`, err)}
		}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := filament.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Filament.id": %w`, err)}
		}
	}
	return nil
}

func (fc *FilamentCreate) sqlSave(ctx context.Context) (*Filament, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FilamentCreate) createSpec() (*Filament, *sqlgraph.CreateSpec) {
	var (
		_node = &Filament{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(filament.Table, sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Registered(); ok {
		_spec.SetField(filament.FieldRegistered, field.TypeTime, value)
		_node.Registered = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(filament.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Material(); ok {
		_spec.SetField(filament.FieldMaterial, field.TypeString, value)
		_node.Material = value
	}
	if value, ok := fc.mutation.Price(); ok {
		_spec.SetField(filament.FieldPrice, field.TypeFloat32, value)
		_node.Price = value
	}
	if value, ok := fc.mutation.Density(); ok {
		_spec.SetField(filament.FieldDensity, field.TypeFloat32, value)
		_node.Density = value
	}
	if value, ok := fc.mutation.Diameter(); ok {
		_spec.SetField(filament.FieldDiameter, field.TypeFloat32, value)
		_node.Diameter = value
	}
	if value, ok := fc.mutation.Weight(); ok {
		_spec.SetField(filament.FieldWeight, field.TypeFloat32, value)
		_node.Weight = value
	}
	if value, ok := fc.mutation.SpoolWeight(); ok {
		_spec.SetField(filament.FieldSpoolWeight, field.TypeFloat32, value)
		_node.SpoolWeight = value
	}
	if value, ok := fc.mutation.ArticleNumber(); ok {
		_spec.SetField(filament.FieldArticleNumber, field.TypeString, value)
		_node.ArticleNumber = value
	}
	if value, ok := fc.mutation.Comment(); ok {
		_spec.SetField(filament.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := fc.mutation.SettingsExtruderTemp(); ok {
		_spec.SetField(filament.FieldSettingsExtruderTemp, field.TypeInt, value)
		_node.SettingsExtruderTemp = value
	}
	if value, ok := fc.mutation.SettingsBedTemp(); ok {
		_spec.SetField(filament.FieldSettingsBedTemp, field.TypeInt, value)
		_node.SettingsBedTemp = value
	}
	if value, ok := fc.mutation.ColorHex(); ok {
		_spec.SetField(filament.FieldColorHex, field.TypeString, value)
		_node.ColorHex = value
	}
	if value, ok := fc.mutation.MultiColorHexes(); ok {
		_spec.SetField(filament.FieldMultiColorHexes, field.TypeString, value)
		_node.MultiColorHexes = value
	}
	if value, ok := fc.mutation.MultiColorDirection(); ok {
		_spec.SetField(filament.FieldMultiColorDirection, field.TypeString, value)
		_node.MultiColorDirection = value
	}
	if value, ok := fc.mutation.ExternalID(); ok {
		_spec.SetField(filament.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if nodes := fc.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filament.VendorTable,
			Columns: []string{filament.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.SpoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FilamentCreateBulk is the builder for creating many Filament entities in bulk.
type FilamentCreateBulk struct {
	config
	err      error
	builders []*FilamentCreate
}

// Save creates the Filament entities in the database.
func (fcb *FilamentCreateBulk) Save(ctx context.Context) ([]*Filament, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Filament, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilamentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilamentCreateBulk) SaveX(ctx context.Context) []*Filament {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilamentCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilamentCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
