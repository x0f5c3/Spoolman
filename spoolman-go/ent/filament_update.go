// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/filamentfield"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/spool"
	"spoolman-go/ent/spoolvendor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilamentUpdate is the builder for updating Filament entities.
type FilamentUpdate struct {
	config
	hooks    []Hook
	mutation *FilamentMutation
}

// Where appends a list predicates to the FilamentUpdate builder.
func (fu *FilamentUpdate) Where(ps ...predicate.Filament) *FilamentUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetRegistered sets the "registered" field.
func (fu *FilamentUpdate) SetRegistered(t time.Time) *FilamentUpdate {
	fu.mutation.SetRegistered(t)
	return fu
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableRegistered(t *time.Time) *FilamentUpdate {
	if t != nil {
		fu.SetRegistered(*t)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FilamentUpdate) SetName(s string) *FilamentUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableName(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FilamentUpdate) ClearName() *FilamentUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetVendorID sets the "vendor_id" field.
func (fu *FilamentUpdate) SetVendorID(i int) *FilamentUpdate {
	fu.mutation.SetVendorID(i)
	return fu
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableVendorID(i *int) *FilamentUpdate {
	if i != nil {
		fu.SetVendorID(*i)
	}
	return fu
}

// ClearVendorID clears the value of the "vendor_id" field.
func (fu *FilamentUpdate) ClearVendorID() *FilamentUpdate {
	fu.mutation.ClearVendorID()
	return fu
}

// SetMaterial sets the "material" field.
func (fu *FilamentUpdate) SetMaterial(s string) *FilamentUpdate {
	fu.mutation.SetMaterial(s)
	return fu
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableMaterial(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetMaterial(*s)
	}
	return fu
}

// ClearMaterial clears the value of the "material" field.
func (fu *FilamentUpdate) ClearMaterial() *FilamentUpdate {
	fu.mutation.ClearMaterial()
	return fu
}

// SetPrice sets the "price" field.
func (fu *FilamentUpdate) SetPrice(f float32) *FilamentUpdate {
	fu.mutation.ResetPrice()
	fu.mutation.SetPrice(f)
	return fu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillablePrice(f *float32) *FilamentUpdate {
	if f != nil {
		fu.SetPrice(*f)
	}
	return fu
}

// AddPrice adds f to the "price" field.
func (fu *FilamentUpdate) AddPrice(f float32) *FilamentUpdate {
	fu.mutation.AddPrice(f)
	return fu
}

// ClearPrice clears the value of the "price" field.
func (fu *FilamentUpdate) ClearPrice() *FilamentUpdate {
	fu.mutation.ClearPrice()
	return fu
}

// SetDensity sets the "density" field.
func (fu *FilamentUpdate) SetDensity(f float32) *FilamentUpdate {
	fu.mutation.ResetDensity()
	fu.mutation.SetDensity(f)
	return fu
}

// SetNillableDensity sets the "density" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableDensity(f *float32) *FilamentUpdate {
	if f != nil {
		fu.SetDensity(*f)
	}
	return fu
}

// AddDensity adds f to the "density" field.
func (fu *FilamentUpdate) AddDensity(f float32) *FilamentUpdate {
	fu.mutation.AddDensity(f)
	return fu
}

// SetDiameter sets the "diameter" field.
func (fu *FilamentUpdate) SetDiameter(f float32) *FilamentUpdate {
	fu.mutation.ResetDiameter()
	fu.mutation.SetDiameter(f)
	return fu
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableDiameter(f *float32) *FilamentUpdate {
	if f != nil {
		fu.SetDiameter(*f)
	}
	return fu
}

// AddDiameter adds f to the "diameter" field.
func (fu *FilamentUpdate) AddDiameter(f float32) *FilamentUpdate {
	fu.mutation.AddDiameter(f)
	return fu
}

// SetWeight sets the "weight" field.
func (fu *FilamentUpdate) SetWeight(f float32) *FilamentUpdate {
	fu.mutation.ResetWeight()
	fu.mutation.SetWeight(f)
	return fu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableWeight(f *float32) *FilamentUpdate {
	if f != nil {
		fu.SetWeight(*f)
	}
	return fu
}

// AddWeight adds f to the "weight" field.
func (fu *FilamentUpdate) AddWeight(f float32) *FilamentUpdate {
	fu.mutation.AddWeight(f)
	return fu
}

// ClearWeight clears the value of the "weight" field.
func (fu *FilamentUpdate) ClearWeight() *FilamentUpdate {
	fu.mutation.ClearWeight()
	return fu
}

// SetSpoolWeight sets the "spool_weight" field.
func (fu *FilamentUpdate) SetSpoolWeight(f float32) *FilamentUpdate {
	fu.mutation.ResetSpoolWeight()
	fu.mutation.SetSpoolWeight(f)
	return fu
}

// SetNillableSpoolWeight sets the "spool_weight" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableSpoolWeight(f *float32) *FilamentUpdate {
	if f != nil {
		fu.SetSpoolWeight(*f)
	}
	return fu
}

// AddSpoolWeight adds f to the "spool_weight" field.
func (fu *FilamentUpdate) AddSpoolWeight(f float32) *FilamentUpdate {
	fu.mutation.AddSpoolWeight(f)
	return fu
}

// ClearSpoolWeight clears the value of the "spool_weight" field.
func (fu *FilamentUpdate) ClearSpoolWeight() *FilamentUpdate {
	fu.mutation.ClearSpoolWeight()
	return fu
}

// SetArticleNumber sets the "article_number" field.
func (fu *FilamentUpdate) SetArticleNumber(s string) *FilamentUpdate {
	fu.mutation.SetArticleNumber(s)
	return fu
}

// SetNillableArticleNumber sets the "article_number" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableArticleNumber(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetArticleNumber(*s)
	}
	return fu
}

// ClearArticleNumber clears the value of the "article_number" field.
func (fu *FilamentUpdate) ClearArticleNumber() *FilamentUpdate {
	fu.mutation.ClearArticleNumber()
	return fu
}

// SetComment sets the "comment" field.
func (fu *FilamentUpdate) SetComment(s string) *FilamentUpdate {
	fu.mutation.SetComment(s)
	return fu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableComment(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetComment(*s)
	}
	return fu
}

// ClearComment clears the value of the "comment" field.
func (fu *FilamentUpdate) ClearComment() *FilamentUpdate {
	fu.mutation.ClearComment()
	return fu
}

// SetSettingsExtruderTemp sets the "settings_extruder_temp" field.
func (fu *FilamentUpdate) SetSettingsExtruderTemp(i int) *FilamentUpdate {
	fu.mutation.ResetSettingsExtruderTemp()
	fu.mutation.SetSettingsExtruderTemp(i)
	return fu
}

// SetNillableSettingsExtruderTemp sets the "settings_extruder_temp" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableSettingsExtruderTemp(i *int) *FilamentUpdate {
	if i != nil {
		fu.SetSettingsExtruderTemp(*i)
	}
	return fu
}

// AddSettingsExtruderTemp adds i to the "settings_extruder_temp" field.
func (fu *FilamentUpdate) AddSettingsExtruderTemp(i int) *FilamentUpdate {
	fu.mutation.AddSettingsExtruderTemp(i)
	return fu
}

// ClearSettingsExtruderTemp clears the value of the "settings_extruder_temp" field.
func (fu *FilamentUpdate) ClearSettingsExtruderTemp() *FilamentUpdate {
	fu.mutation.ClearSettingsExtruderTemp()
	return fu
}

// SetSettingsBedTemp sets the "settings_bed_temp" field.
func (fu *FilamentUpdate) SetSettingsBedTemp(i int) *FilamentUpdate {
	fu.mutation.ResetSettingsBedTemp()
	fu.mutation.SetSettingsBedTemp(i)
	return fu
}

// SetNillableSettingsBedTemp sets the "settings_bed_temp" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableSettingsBedTemp(i *int) *FilamentUpdate {
	if i != nil {
		fu.SetSettingsBedTemp(*i)
	}
	return fu
}

// AddSettingsBedTemp adds i to the "settings_bed_temp" field.
func (fu *FilamentUpdate) AddSettingsBedTemp(i int) *FilamentUpdate {
	fu.mutation.AddSettingsBedTemp(i)
	return fu
}

// ClearSettingsBedTemp clears the value of the "settings_bed_temp" field.
func (fu *FilamentUpdate) ClearSettingsBedTemp() *FilamentUpdate {
	fu.mutation.ClearSettingsBedTemp()
	return fu
}

// SetColorHex sets the "color_hex" field.
func (fu *FilamentUpdate) SetColorHex(s string) *FilamentUpdate {
	fu.mutation.SetColorHex(s)
	return fu
}

// SetNillableColorHex sets the "color_hex" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableColorHex(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetColorHex(*s)
	}
	return fu
}

// ClearColorHex clears the value of the "color_hex" field.
func (fu *FilamentUpdate) ClearColorHex() *FilamentUpdate {
	fu.mutation.ClearColorHex()
	return fu
}

// SetMultiColorHexes sets the "multi_color_hexes" field.
func (fu *FilamentUpdate) SetMultiColorHexes(s string) *FilamentUpdate {
	fu.mutation.SetMultiColorHexes(s)
	return fu
}

// SetNillableMultiColorHexes sets the "multi_color_hexes" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableMultiColorHexes(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetMultiColorHexes(*s)
	}
	return fu
}

// ClearMultiColorHexes clears the value of the "multi_color_hexes" field.
func (fu *FilamentUpdate) ClearMultiColorHexes() *FilamentUpdate {
	fu.mutation.ClearMultiColorHexes()
	return fu
}

// SetMultiColorDirection sets the "multi_color_direction" field.
func (fu *FilamentUpdate) SetMultiColorDirection(s string) *FilamentUpdate {
	fu.mutation.SetMultiColorDirection(s)
	return fu
}

// SetNillableMultiColorDirection sets the "multi_color_direction" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableMultiColorDirection(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetMultiColorDirection(*s)
	}
	return fu
}

// ClearMultiColorDirection clears the value of the "multi_color_direction" field.
func (fu *FilamentUpdate) ClearMultiColorDirection() *FilamentUpdate {
	fu.mutation.ClearMultiColorDirection()
	return fu
}

// SetExternalID sets the "external_id" field.
func (fu *FilamentUpdate) SetExternalID(s string) *FilamentUpdate {
	fu.mutation.SetExternalID(s)
	return fu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fu *FilamentUpdate) SetNillableExternalID(s *string) *FilamentUpdate {
	if s != nil {
		fu.SetExternalID(*s)
	}
	return fu
}

// ClearExternalID clears the value of the "external_id" field.
func (fu *FilamentUpdate) ClearExternalID() *FilamentUpdate {
	fu.mutation.ClearExternalID()
	return fu
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (fu *FilamentUpdate) SetVendor(s *SpoolVendor) *FilamentUpdate {
	return fu.SetVendorID(s.ID)
}

// AddSpoolIDs adds the "spools" edge to the Spool entity by IDs.
func (fu *FilamentUpdate) AddSpoolIDs(ids ...int) *FilamentUpdate {
	fu.mutation.AddSpoolIDs(ids...)
	return fu
}

// AddSpools adds the "spools" edges to the Spool entity.
func (fu *FilamentUpdate) AddSpools(s ...*Spool) *FilamentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddSpoolIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the FilamentField entity by IDs.
func (fu *FilamentUpdate) AddExtraIDs(ids ...int) *FilamentUpdate {
	fu.mutation.AddExtraIDs(ids...)
	return fu
}

// AddExtra adds the "extra" edges to the FilamentField entity.
func (fu *FilamentUpdate) AddExtra(f ...*FilamentField) *FilamentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddExtraIDs(ids...)
}

// Mutation returns the FilamentMutation object of the builder.
func (fu *FilamentUpdate) Mutation() *FilamentMutation {
	return fu.mutation
}

// ClearVendor clears the "vendor" edge to the SpoolVendor entity.
func (fu *FilamentUpdate) ClearVendor() *FilamentUpdate {
	fu.mutation.ClearVendor()
	return fu
}

// ClearSpools clears all "spools" edges to the Spool entity.
func (fu *FilamentUpdate) ClearSpools() *FilamentUpdate {
	fu.mutation.ClearSpools()
	return fu
}

// RemoveSpoolIDs removes the "spools" edge to Spool entities by IDs.
func (fu *FilamentUpdate) RemoveSpoolIDs(ids ...int) *FilamentUpdate {
	fu.mutation.RemoveSpoolIDs(ids...)
	return fu
}

// RemoveSpools removes "spools" edges to Spool entities.
func (fu *FilamentUpdate) RemoveSpools(s ...*Spool) *FilamentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveSpoolIDs(ids...)
}

// ClearExtra clears all "extra" edges to the FilamentField entity.
func (fu *FilamentUpdate) ClearExtra() *FilamentUpdate {
	fu.mutation.ClearExtra()
	return fu
}

// RemoveExtraIDs removes the "extra" edge to FilamentField entities by IDs.
func (fu *FilamentUpdate) RemoveExtraIDs(ids ...int) *FilamentUpdate {
	fu.mutation.RemoveExtraIDs(ids...)
	return fu
}

// RemoveExtra removes "extra" edges to FilamentField entities.
func (fu *FilamentUpdate) RemoveExtra(f ...*FilamentField) *FilamentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveExtraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilamentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilamentUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilamentUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilamentUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FilamentUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := filament.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filament.name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Material(); ok {
		if err := filament.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Filament.material": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ArticleNumber(); ok {
		if err := filament.ArticleNumberValidator(v); err != nil {
			return &ValidationError{Name: "article_number", err: fmt.Errorf(`ent: validator failed for field "Filament.article_number": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Comment(); ok {
		if err := filament.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Filament.comment": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ColorHex(); ok {
		if err := filament.ColorHexValidator(v); err != nil {
			return &ValidationError{Name: "color_hex", err: fmt.Errorf(`ent: validator failed for field "Filament.color_hex": %w`, err)}
		}
	}
	if v, ok := fu.mutation.MultiColorHexes(); ok {
		if err := filament.MultiColorHexesValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_hexes", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_hexes": %w`, err)}
		}
	}
	if v, ok := fu.mutation.MultiColorDirection(); ok {
		if err := filament.MultiColorDirectionValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_direction", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_direction": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ExternalID(); ok {
		if err := filament.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Filament.external_id": %w`, err)}
		}
	}
	return nil
}

func (fu *FilamentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(filament.Table, filament.Columns, sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Registered(); ok {
		_spec.SetField(filament.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(filament.FieldName, field.TypeString, value)
	}
	if fu.mutation.NameCleared() {
		_spec.ClearField(filament.FieldName, field.TypeString)
	}
	if value, ok := fu.mutation.Material(); ok {
		_spec.SetField(filament.FieldMaterial, field.TypeString, value)
	}
	if fu.mutation.MaterialCleared() {
		_spec.ClearField(filament.FieldMaterial, field.TypeString)
	}
	if value, ok := fu.mutation.Price(); ok {
		_spec.SetField(filament.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.AddedPrice(); ok {
		_spec.AddField(filament.FieldPrice, field.TypeFloat32, value)
	}
	if fu.mutation.PriceCleared() {
		_spec.ClearField(filament.FieldPrice, field.TypeFloat32)
	}
	if value, ok := fu.mutation.Density(); ok {
		_spec.SetField(filament.FieldDensity, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.AddedDensity(); ok {
		_spec.AddField(filament.FieldDensity, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.Diameter(); ok {
		_spec.SetField(filament.FieldDiameter, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.AddedDiameter(); ok {
		_spec.AddField(filament.FieldDiameter, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.Weight(); ok {
		_spec.SetField(filament.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.AddedWeight(); ok {
		_spec.AddField(filament.FieldWeight, field.TypeFloat32, value)
	}
	if fu.mutation.WeightCleared() {
		_spec.ClearField(filament.FieldWeight, field.TypeFloat32)
	}
	if value, ok := fu.mutation.SpoolWeight(); ok {
		_spec.SetField(filament.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := fu.mutation.AddedSpoolWeight(); ok {
		_spec.AddField(filament.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if fu.mutation.SpoolWeightCleared() {
		_spec.ClearField(filament.FieldSpoolWeight, field.TypeFloat32)
	}
	if value, ok := fu.mutation.ArticleNumber(); ok {
		_spec.SetField(filament.FieldArticleNumber, field.TypeString, value)
	}
	if fu.mutation.ArticleNumberCleared() {
		_spec.ClearField(filament.FieldArticleNumber, field.TypeString)
	}
	if value, ok := fu.mutation.Comment(); ok {
		_spec.SetField(filament.FieldComment, field.TypeString, value)
	}
	if fu.mutation.CommentCleared() {
		_spec.ClearField(filament.FieldComment, field.TypeString)
	}
	if value, ok := fu.mutation.SettingsExtruderTemp(); ok {
		_spec.SetField(filament.FieldSettingsExtruderTemp, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedSettingsExtruderTemp(); ok {
		_spec.AddField(filament.FieldSettingsExtruderTemp, field.TypeInt, value)
	}
	if fu.mutation.SettingsExtruderTempCleared() {
		_spec.ClearField(filament.FieldSettingsExtruderTemp, field.TypeInt)
	}
	if value, ok := fu.mutation.SettingsBedTemp(); ok {
		_spec.SetField(filament.FieldSettingsBedTemp, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedSettingsBedTemp(); ok {
		_spec.AddField(filament.FieldSettingsBedTemp, field.TypeInt, value)
	}
	if fu.mutation.SettingsBedTempCleared() {
		_spec.ClearField(filament.FieldSettingsBedTemp, field.TypeInt)
	}
	if value, ok := fu.mutation.ColorHex(); ok {
		_spec.SetField(filament.FieldColorHex, field.TypeString, value)
	}
	if fu.mutation.ColorHexCleared() {
		_spec.ClearField(filament.FieldColorHex, field.TypeString)
	}
	if value, ok := fu.mutation.MultiColorHexes(); ok {
		_spec.SetField(filament.FieldMultiColorHexes, field.TypeString, value)
	}
	if fu.mutation.MultiColorHexesCleared() {
		_spec.ClearField(filament.FieldMultiColorHexes, field.TypeString)
	}
	if value, ok := fu.mutation.MultiColorDirection(); ok {
		_spec.SetField(filament.FieldMultiColorDirection, field.TypeString, value)
	}
	if fu.mutation.MultiColorDirectionCleared() {
		_spec.ClearField(filament.FieldMultiColorDirection, field.TypeString)
	}
	if value, ok := fu.mutation.ExternalID(); ok {
		_spec.SetField(filament.FieldExternalID, field.TypeString, value)
	}
	if fu.mutation.ExternalIDCleared() {
		_spec.ClearField(filament.FieldExternalID, field.TypeString)
	}
	if fu.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filament.VendorTable,
			Columns: []string{filament.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filament.VendorTable,
			Columns: []string{filament.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SpoolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSpoolsIDs(); len(nodes) > 0 && !fu.mutation.SpoolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SpoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedExtraIDs(); len(nodes) > 0 && !fu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FilamentUpdateOne is the builder for updating a single Filament entity.
type FilamentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilamentMutation
}

// SetRegistered sets the "registered" field.
func (fuo *FilamentUpdateOne) SetRegistered(t time.Time) *FilamentUpdateOne {
	fuo.mutation.SetRegistered(t)
	return fuo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableRegistered(t *time.Time) *FilamentUpdateOne {
	if t != nil {
		fuo.SetRegistered(*t)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FilamentUpdateOne) SetName(s string) *FilamentUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableName(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FilamentUpdateOne) ClearName() *FilamentUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetVendorID sets the "vendor_id" field.
func (fuo *FilamentUpdateOne) SetVendorID(i int) *FilamentUpdateOne {
	fuo.mutation.SetVendorID(i)
	return fuo
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableVendorID(i *int) *FilamentUpdateOne {
	if i != nil {
		fuo.SetVendorID(*i)
	}
	return fuo
}

// ClearVendorID clears the value of the "vendor_id" field.
func (fuo *FilamentUpdateOne) ClearVendorID() *FilamentUpdateOne {
	fuo.mutation.ClearVendorID()
	return fuo
}

// SetMaterial sets the "material" field.
func (fuo *FilamentUpdateOne) SetMaterial(s string) *FilamentUpdateOne {
	fuo.mutation.SetMaterial(s)
	return fuo
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableMaterial(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetMaterial(*s)
	}
	return fuo
}

// ClearMaterial clears the value of the "material" field.
func (fuo *FilamentUpdateOne) ClearMaterial() *FilamentUpdateOne {
	fuo.mutation.ClearMaterial()
	return fuo
}

// SetPrice sets the "price" field.
func (fuo *FilamentUpdateOne) SetPrice(f float32) *FilamentUpdateOne {
	fuo.mutation.ResetPrice()
	fuo.mutation.SetPrice(f)
	return fuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillablePrice(f *float32) *FilamentUpdateOne {
	if f != nil {
		fuo.SetPrice(*f)
	}
	return fuo
}

// AddPrice adds f to the "price" field.
func (fuo *FilamentUpdateOne) AddPrice(f float32) *FilamentUpdateOne {
	fuo.mutation.AddPrice(f)
	return fuo
}

// ClearPrice clears the value of the "price" field.
func (fuo *FilamentUpdateOne) ClearPrice() *FilamentUpdateOne {
	fuo.mutation.ClearPrice()
	return fuo
}

// SetDensity sets the "density" field.
func (fuo *FilamentUpdateOne) SetDensity(f float32) *FilamentUpdateOne {
	fuo.mutation.ResetDensity()
	fuo.mutation.SetDensity(f)
	return fuo
}

// SetNillableDensity sets the "density" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableDensity(f *float32) *FilamentUpdateOne {
	if f != nil {
		fuo.SetDensity(*f)
	}
	return fuo
}

// AddDensity adds f to the "density" field.
func (fuo *FilamentUpdateOne) AddDensity(f float32) *FilamentUpdateOne {
	fuo.mutation.AddDensity(f)
	return fuo
}

// SetDiameter sets the "diameter" field.
func (fuo *FilamentUpdateOne) SetDiameter(f float32) *FilamentUpdateOne {
	fuo.mutation.ResetDiameter()
	fuo.mutation.SetDiameter(f)
	return fuo
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableDiameter(f *float32) *FilamentUpdateOne {
	if f != nil {
		fuo.SetDiameter(*f)
	}
	return fuo
}

// AddDiameter adds f to the "diameter" field.
func (fuo *FilamentUpdateOne) AddDiameter(f float32) *FilamentUpdateOne {
	fuo.mutation.AddDiameter(f)
	return fuo
}

// SetWeight sets the "weight" field.
func (fuo *FilamentUpdateOne) SetWeight(f float32) *FilamentUpdateOne {
	fuo.mutation.ResetWeight()
	fuo.mutation.SetWeight(f)
	return fuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableWeight(f *float32) *FilamentUpdateOne {
	if f != nil {
		fuo.SetWeight(*f)
	}
	return fuo
}

// AddWeight adds f to the "weight" field.
func (fuo *FilamentUpdateOne) AddWeight(f float32) *FilamentUpdateOne {
	fuo.mutation.AddWeight(f)
	return fuo
}

// ClearWeight clears the value of the "weight" field.
func (fuo *FilamentUpdateOne) ClearWeight() *FilamentUpdateOne {
	fuo.mutation.ClearWeight()
	return fuo
}

// SetSpoolWeight sets the "spool_weight" field.
func (fuo *FilamentUpdateOne) SetSpoolWeight(f float32) *FilamentUpdateOne {
	fuo.mutation.ResetSpoolWeight()
	fuo.mutation.SetSpoolWeight(f)
	return fuo
}

// SetNillableSpoolWeight sets the "spool_weight" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableSpoolWeight(f *float32) *FilamentUpdateOne {
	if f != nil {
		fuo.SetSpoolWeight(*f)
	}
	return fuo
}

// AddSpoolWeight adds f to the "spool_weight" field.
func (fuo *FilamentUpdateOne) AddSpoolWeight(f float32) *FilamentUpdateOne {
	fuo.mutation.AddSpoolWeight(f)
	return fuo
}

// ClearSpoolWeight clears the value of the "spool_weight" field.
func (fuo *FilamentUpdateOne) ClearSpoolWeight() *FilamentUpdateOne {
	fuo.mutation.ClearSpoolWeight()
	return fuo
}

// SetArticleNumber sets the "article_number" field.
func (fuo *FilamentUpdateOne) SetArticleNumber(s string) *FilamentUpdateOne {
	fuo.mutation.SetArticleNumber(s)
	return fuo
}

// SetNillableArticleNumber sets the "article_number" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableArticleNumber(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetArticleNumber(*s)
	}
	return fuo
}

// ClearArticleNumber clears the value of the "article_number" field.
func (fuo *FilamentUpdateOne) ClearArticleNumber() *FilamentUpdateOne {
	fuo.mutation.ClearArticleNumber()
	return fuo
}

// SetComment sets the "comment" field.
func (fuo *FilamentUpdateOne) SetComment(s string) *FilamentUpdateOne {
	fuo.mutation.SetComment(s)
	return fuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableComment(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetComment(*s)
	}
	return fuo
}

// ClearComment clears the value of the "comment" field.
func (fuo *FilamentUpdateOne) ClearComment() *FilamentUpdateOne {
	fuo.mutation.ClearComment()
	return fuo
}

// SetSettingsExtruderTemp sets the "settings_extruder_temp" field.
func (fuo *FilamentUpdateOne) SetSettingsExtruderTemp(i int) *FilamentUpdateOne {
	fuo.mutation.ResetSettingsExtruderTemp()
	fuo.mutation.SetSettingsExtruderTemp(i)
	return fuo
}

// SetNillableSettingsExtruderTemp sets the "settings_extruder_temp" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableSettingsExtruderTemp(i *int) *FilamentUpdateOne {
	if i != nil {
		fuo.SetSettingsExtruderTemp(*i)
	}
	return fuo
}

// AddSettingsExtruderTemp adds i to the "settings_extruder_temp" field.
func (fuo *FilamentUpdateOne) AddSettingsExtruderTemp(i int) *FilamentUpdateOne {
	fuo.mutation.AddSettingsExtruderTemp(i)
	return fuo
}

// ClearSettingsExtruderTemp clears the value of the "settings_extruder_temp" field.
func (fuo *FilamentUpdateOne) ClearSettingsExtruderTemp() *FilamentUpdateOne {
	fuo.mutation.ClearSettingsExtruderTemp()
	return fuo
}

// SetSettingsBedTemp sets the "settings_bed_temp" field.
func (fuo *FilamentUpdateOne) SetSettingsBedTemp(i int) *FilamentUpdateOne {
	fuo.mutation.ResetSettingsBedTemp()
	fuo.mutation.SetSettingsBedTemp(i)
	return fuo
}

// SetNillableSettingsBedTemp sets the "settings_bed_temp" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableSettingsBedTemp(i *int) *FilamentUpdateOne {
	if i != nil {
		fuo.SetSettingsBedTemp(*i)
	}
	return fuo
}

// AddSettingsBedTemp adds i to the "settings_bed_temp" field.
func (fuo *FilamentUpdateOne) AddSettingsBedTemp(i int) *FilamentUpdateOne {
	fuo.mutation.AddSettingsBedTemp(i)
	return fuo
}

// ClearSettingsBedTemp clears the value of the "settings_bed_temp" field.
func (fuo *FilamentUpdateOne) ClearSettingsBedTemp() *FilamentUpdateOne {
	fuo.mutation.ClearSettingsBedTemp()
	return fuo
}

// SetColorHex sets the "color_hex" field.
func (fuo *FilamentUpdateOne) SetColorHex(s string) *FilamentUpdateOne {
	fuo.mutation.SetColorHex(s)
	return fuo
}

// SetNillableColorHex sets the "color_hex" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableColorHex(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetColorHex(*s)
	}
	return fuo
}

// ClearColorHex clears the value of the "color_hex" field.
func (fuo *FilamentUpdateOne) ClearColorHex() *FilamentUpdateOne {
	fuo.mutation.ClearColorHex()
	return fuo
}

// SetMultiColorHexes sets the "multi_color_hexes" field.
func (fuo *FilamentUpdateOne) SetMultiColorHexes(s string) *FilamentUpdateOne {
	fuo.mutation.SetMultiColorHexes(s)
	return fuo
}

// SetNillableMultiColorHexes sets the "multi_color_hexes" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableMultiColorHexes(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetMultiColorHexes(*s)
	}
	return fuo
}

// ClearMultiColorHexes clears the value of the "multi_color_hexes" field.
func (fuo *FilamentUpdateOne) ClearMultiColorHexes() *FilamentUpdateOne {
	fuo.mutation.ClearMultiColorHexes()
	return fuo
}

// SetMultiColorDirection sets the "multi_color_direction" field.
func (fuo *FilamentUpdateOne) SetMultiColorDirection(s string) *FilamentUpdateOne {
	fuo.mutation.SetMultiColorDirection(s)
	return fuo
}

// SetNillableMultiColorDirection sets the "multi_color_direction" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableMultiColorDirection(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetMultiColorDirection(*s)
	}
	return fuo
}

// ClearMultiColorDirection clears the value of the "multi_color_direction" field.
func (fuo *FilamentUpdateOne) ClearMultiColorDirection() *FilamentUpdateOne {
	fuo.mutation.ClearMultiColorDirection()
	return fuo
}

// SetExternalID sets the "external_id" field.
func (fuo *FilamentUpdateOne) SetExternalID(s string) *FilamentUpdateOne {
	fuo.mutation.SetExternalID(s)
	return fuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fuo *FilamentUpdateOne) SetNillableExternalID(s *string) *FilamentUpdateOne {
	if s != nil {
		fuo.SetExternalID(*s)
	}
	return fuo
}

// ClearExternalID clears the value of the "external_id" field.
func (fuo *FilamentUpdateOne) ClearExternalID() *FilamentUpdateOne {
	fuo.mutation.ClearExternalID()
	return fuo
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (fuo *FilamentUpdateOne) SetVendor(s *SpoolVendor) *FilamentUpdateOne {
	return fuo.SetVendorID(s.ID)
}

// AddSpoolIDs adds the "spools" edge to the Spool entity by IDs.
func (fuo *FilamentUpdateOne) AddSpoolIDs(ids ...int) *FilamentUpdateOne {
	fuo.mutation.AddSpoolIDs(ids...)
	return fuo
}

// AddSpools adds the "spools" edges to the Spool entity.
func (fuo *FilamentUpdateOne) AddSpools(s ...*Spool) *FilamentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddSpoolIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the FilamentField entity by IDs.
func (fuo *FilamentUpdateOne) AddExtraIDs(ids ...int) *FilamentUpdateOne {
	fuo.mutation.AddExtraIDs(ids...)
	return fuo
}

// AddExtra adds the "extra" edges to the FilamentField entity.
func (fuo *FilamentUpdateOne) AddExtra(f ...*FilamentField) *FilamentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddExtraIDs(ids...)
}

// Mutation returns the FilamentMutation object of the builder.
func (fuo *FilamentUpdateOne) Mutation() *FilamentMutation {
	return fuo.mutation
}

// ClearVendor clears the "vendor" edge to the SpoolVendor entity.
func (fuo *FilamentUpdateOne) ClearVendor() *FilamentUpdateOne {
	fuo.mutation.ClearVendor()
	return fuo
}

// ClearSpools clears all "spools" edges to the Spool entity.
func (fuo *FilamentUpdateOne) ClearSpools() *FilamentUpdateOne {
	fuo.mutation.ClearSpools()
	return fuo
}

// RemoveSpoolIDs removes the "spools" edge to Spool entities by IDs.
func (fuo *FilamentUpdateOne) RemoveSpoolIDs(ids ...int) *FilamentUpdateOne {
	fuo.mutation.RemoveSpoolIDs(ids...)
	return fuo
}

// RemoveSpools removes "spools" edges to Spool entities.
func (fuo *FilamentUpdateOne) RemoveSpools(s ...*Spool) *FilamentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveSpoolIDs(ids...)
}

// ClearExtra clears all "extra" edges to the FilamentField entity.
func (fuo *FilamentUpdateOne) ClearExtra() *FilamentUpdateOne {
	fuo.mutation.ClearExtra()
	return fuo
}

// RemoveExtraIDs removes the "extra" edge to FilamentField entities by IDs.
func (fuo *FilamentUpdateOne) RemoveExtraIDs(ids ...int) *FilamentUpdateOne {
	fuo.mutation.RemoveExtraIDs(ids...)
	return fuo
}

// RemoveExtra removes "extra" edges to FilamentField entities.
func (fuo *FilamentUpdateOne) RemoveExtra(f ...*FilamentField) *FilamentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveExtraIDs(ids...)
}

// Where appends a list predicates to the FilamentUpdate builder.
func (fuo *FilamentUpdateOne) Where(ps ...predicate.Filament) *FilamentUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilamentUpdateOne) Select(field string, fields ...string) *FilamentUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Filament entity.
func (fuo *FilamentUpdateOne) Save(ctx context.Context) (*Filament, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilamentUpdateOne) SaveX(ctx context.Context) *Filament {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilamentUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilamentUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FilamentUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := filament.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filament.name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Material(); ok {
		if err := filament.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Filament.material": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ArticleNumber(); ok {
		if err := filament.ArticleNumberValidator(v); err != nil {
			return &ValidationError{Name: "article_number", err: fmt.Errorf(`ent: validator failed for field "Filament.article_number": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Comment(); ok {
		if err := filament.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Filament.comment": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ColorHex(); ok {
		if err := filament.ColorHexValidator(v); err != nil {
			return &ValidationError{Name: "color_hex", err: fmt.Errorf(`ent: validator failed for field "Filament.color_hex": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.MultiColorHexes(); ok {
		if err := filament.MultiColorHexesValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_hexes", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_hexes": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.MultiColorDirection(); ok {
		if err := filament.MultiColorDirectionValidator(v); err != nil {
			return &ValidationError{Name: "multi_color_direction", err: fmt.Errorf(`ent: validator failed for field "Filament.multi_color_direction": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ExternalID(); ok {
		if err := filament.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Filament.external_id": %w`, err)}
		}
	}
	return nil
}

func (fuo *FilamentUpdateOne) sqlSave(ctx context.Context) (_node *Filament, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filament.Table, filament.Columns, sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Filament.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filament.FieldID)
		for _, f := range fields {
			if !filament.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filament.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Registered(); ok {
		_spec.SetField(filament.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(filament.FieldName, field.TypeString, value)
	}
	if fuo.mutation.NameCleared() {
		_spec.ClearField(filament.FieldName, field.TypeString)
	}
	if value, ok := fuo.mutation.Material(); ok {
		_spec.SetField(filament.FieldMaterial, field.TypeString, value)
	}
	if fuo.mutation.MaterialCleared() {
		_spec.ClearField(filament.FieldMaterial, field.TypeString)
	}
	if value, ok := fuo.mutation.Price(); ok {
		_spec.SetField(filament.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.AddedPrice(); ok {
		_spec.AddField(filament.FieldPrice, field.TypeFloat32, value)
	}
	if fuo.mutation.PriceCleared() {
		_spec.ClearField(filament.FieldPrice, field.TypeFloat32)
	}
	if value, ok := fuo.mutation.Density(); ok {
		_spec.SetField(filament.FieldDensity, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.AddedDensity(); ok {
		_spec.AddField(filament.FieldDensity, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.Diameter(); ok {
		_spec.SetField(filament.FieldDiameter, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.AddedDiameter(); ok {
		_spec.AddField(filament.FieldDiameter, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.Weight(); ok {
		_spec.SetField(filament.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.AddedWeight(); ok {
		_spec.AddField(filament.FieldWeight, field.TypeFloat32, value)
	}
	if fuo.mutation.WeightCleared() {
		_spec.ClearField(filament.FieldWeight, field.TypeFloat32)
	}
	if value, ok := fuo.mutation.SpoolWeight(); ok {
		_spec.SetField(filament.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := fuo.mutation.AddedSpoolWeight(); ok {
		_spec.AddField(filament.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if fuo.mutation.SpoolWeightCleared() {
		_spec.ClearField(filament.FieldSpoolWeight, field.TypeFloat32)
	}
	if value, ok := fuo.mutation.ArticleNumber(); ok {
		_spec.SetField(filament.FieldArticleNumber, field.TypeString, value)
	}
	if fuo.mutation.ArticleNumberCleared() {
		_spec.ClearField(filament.FieldArticleNumber, field.TypeString)
	}
	if value, ok := fuo.mutation.Comment(); ok {
		_spec.SetField(filament.FieldComment, field.TypeString, value)
	}
	if fuo.mutation.CommentCleared() {
		_spec.ClearField(filament.FieldComment, field.TypeString)
	}
	if value, ok := fuo.mutation.SettingsExtruderTemp(); ok {
		_spec.SetField(filament.FieldSettingsExtruderTemp, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedSettingsExtruderTemp(); ok {
		_spec.AddField(filament.FieldSettingsExtruderTemp, field.TypeInt, value)
	}
	if fuo.mutation.SettingsExtruderTempCleared() {
		_spec.ClearField(filament.FieldSettingsExtruderTemp, field.TypeInt)
	}
	if value, ok := fuo.mutation.SettingsBedTemp(); ok {
		_spec.SetField(filament.FieldSettingsBedTemp, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedSettingsBedTemp(); ok {
		_spec.AddField(filament.FieldSettingsBedTemp, field.TypeInt, value)
	}
	if fuo.mutation.SettingsBedTempCleared() {
		_spec.ClearField(filament.FieldSettingsBedTemp, field.TypeInt)
	}
	if value, ok := fuo.mutation.ColorHex(); ok {
		_spec.SetField(filament.FieldColorHex, field.TypeString, value)
	}
	if fuo.mutation.ColorHexCleared() {
		_spec.ClearField(filament.FieldColorHex, field.TypeString)
	}
	if value, ok := fuo.mutation.MultiColorHexes(); ok {
		_spec.SetField(filament.FieldMultiColorHexes, field.TypeString, value)
	}
	if fuo.mutation.MultiColorHexesCleared() {
		_spec.ClearField(filament.FieldMultiColorHexes, field.TypeString)
	}
	if value, ok := fuo.mutation.MultiColorDirection(); ok {
		_spec.SetField(filament.FieldMultiColorDirection, field.TypeString, value)
	}
	if fuo.mutation.MultiColorDirectionCleared() {
		_spec.ClearField(filament.FieldMultiColorDirection, field.TypeString)
	}
	if value, ok := fuo.mutation.ExternalID(); ok {
		_spec.SetField(filament.FieldExternalID, field.TypeString, value)
	}
	if fuo.mutation.ExternalIDCleared() {
		_spec.ClearField(filament.FieldExternalID, field.TypeString)
	}
	if fuo.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filament.VendorTable,
			Columns: []string{filament.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filament.VendorTable,
			Columns: []string{filament.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SpoolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSpoolsIDs(); len(nodes) > 0 && !fuo.mutation.SpoolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SpoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.SpoolsTable,
			Columns: []string{filament.SpoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedExtraIDs(); len(nodes) > 0 && !fuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filament.ExtraTable,
			Columns: []string{filament.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filamentfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Filament{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filament.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
