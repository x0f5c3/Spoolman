// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/spoolvendor"
	"spoolman-go/ent/vendorfield"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VendorField is the model entity for the VendorField schema.
type VendorField struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VendorID holds the value of the "vendor_id" field.
	VendorID int `json:"vendor_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorFieldQuery when eager-loading is set.
	Edges        VendorFieldEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorFieldEdges holds the relations/edges for other nodes in the graph.
type VendorFieldEdges struct {
	// Vendor holds the value of the vendor edge.
	Vendor *SpoolVendor `json:"vendor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorFieldEdges) VendorOrErr() (*SpoolVendor, error) {
	if e.Vendor != nil {
		return e.Vendor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: spoolvendor.Label}
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorfield.FieldID, vendorfield.FieldVendorID:
			values[i] = new(sql.NullInt64)
		case vendorfield.FieldKey, vendorfield.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorField fields.
func (vf *VendorField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorfield.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vf.ID = int(value.Int64)
		case vendorfield.FieldVendorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				vf.VendorID = int(value.Int64)
			}
		case vendorfield.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				vf.Key = value.String
			}
		case vendorfield.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				vf.Value = value.String
			}
		default:
			vf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the VendorField.
// This includes values selected through modifiers, order, etc.
func (vf *VendorField) GetValue(name string) (ent.Value, error) {
	return vf.selectValues.Get(name)
}

// QueryVendor queries the "vendor" edge of the VendorField entity.
func (vf *VendorField) QueryVendor() *SpoolVendorQuery {
	return NewVendorFieldClient(vf.config).QueryVendor(vf)
}

// Update returns a builder for updating this VendorField.
// Note that you need to call VendorField.Unwrap() before calling this method if this VendorField
// was returned from a transaction, and the transaction was committed or rolled back.
func (vf *VendorField) Update() *VendorFieldUpdateOne {
	return NewVendorFieldClient(vf.config).UpdateOne(vf)
}

// Unwrap unwraps the VendorField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vf *VendorField) Unwrap() *VendorField {
	_tx, ok := vf.config.driver.(*txDriver)
	if !ok {
		panic("ent: VendorField is not a transactional entity")
	}
	vf.config.driver = _tx.drv
	return vf
}

// String implements the fmt.Stringer.
func (vf *VendorField) String() string {
	var builder strings.Builder
	builder.WriteString("VendorField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vf.ID))
	builder.WriteString("vendor_id=")
	builder.WriteString(fmt.Sprintf("%v", vf.VendorID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(vf.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(vf.Value)
	builder.WriteByte(')')
	return builder.String()
}

// VendorFields is a parsable slice of VendorField.
type VendorFields []*VendorField
