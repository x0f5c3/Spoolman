// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/spoolvendor"
	"spoolman-go/ent/vendorfield"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpoolVendorUpdate is the builder for updating SpoolVendor entities.
type SpoolVendorUpdate struct {
	config
	hooks    []Hook
	mutation *SpoolVendorMutation
}

// Where appends a list predicates to the SpoolVendorUpdate builder.
func (svu *SpoolVendorUpdate) Where(ps ...predicate.SpoolVendor) *SpoolVendorUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetRegistered sets the "registered" field.
func (svu *SpoolVendorUpdate) SetRegistered(t time.Time) *SpoolVendorUpdate {
	svu.mutation.SetRegistered(t)
	return svu
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (svu *SpoolVendorUpdate) SetNillableRegistered(t *time.Time) *SpoolVendorUpdate {
	if t != nil {
		svu.SetRegistered(*t)
	}
	return svu
}

// SetName sets the "name" field.
func (svu *SpoolVendorUpdate) SetName(s string) *SpoolVendorUpdate {
	svu.mutation.SetName(s)
	return svu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (svu *SpoolVendorUpdate) SetNillableName(s *string) *SpoolVendorUpdate {
	if s != nil {
		svu.SetName(*s)
	}
	return svu
}

// SetEmptySpoolWeight sets the "empty_spool_weight" field.
func (svu *SpoolVendorUpdate) SetEmptySpoolWeight(f float32) *SpoolVendorUpdate {
	svu.mutation.ResetEmptySpoolWeight()
	svu.mutation.SetEmptySpoolWeight(f)
	return svu
}

// SetNillableEmptySpoolWeight sets the "empty_spool_weight" field if the given value is not nil.
func (svu *SpoolVendorUpdate) SetNillableEmptySpoolWeight(f *float32) *SpoolVendorUpdate {
	if f != nil {
		svu.SetEmptySpoolWeight(*f)
	}
	return svu
}

// AddEmptySpoolWeight adds f to the "empty_spool_weight" field.
func (svu *SpoolVendorUpdate) AddEmptySpoolWeight(f float32) *SpoolVendorUpdate {
	svu.mutation.AddEmptySpoolWeight(f)
	return svu
}

// ClearEmptySpoolWeight clears the value of the "empty_spool_weight" field.
func (svu *SpoolVendorUpdate) ClearEmptySpoolWeight() *SpoolVendorUpdate {
	svu.mutation.ClearEmptySpoolWeight()
	return svu
}

// SetComment sets the "comment" field.
func (svu *SpoolVendorUpdate) SetComment(s string) *SpoolVendorUpdate {
	svu.mutation.SetComment(s)
	return svu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (svu *SpoolVendorUpdate) SetNillableComment(s *string) *SpoolVendorUpdate {
	if s != nil {
		svu.SetComment(*s)
	}
	return svu
}

// ClearComment clears the value of the "comment" field.
func (svu *SpoolVendorUpdate) ClearComment() *SpoolVendorUpdate {
	svu.mutation.ClearComment()
	return svu
}

// SetExternalID sets the "external_id" field.
func (svu *SpoolVendorUpdate) SetExternalID(s string) *SpoolVendorUpdate {
	svu.mutation.SetExternalID(s)
	return svu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (svu *SpoolVendorUpdate) SetNillableExternalID(s *string) *SpoolVendorUpdate {
	if s != nil {
		svu.SetExternalID(*s)
	}
	return svu
}

// ClearExternalID clears the value of the "external_id" field.
func (svu *SpoolVendorUpdate) ClearExternalID() *SpoolVendorUpdate {
	svu.mutation.ClearExternalID()
	return svu
}

// AddFilamentIDs adds the "filaments" edge to the Filament entity by IDs.
func (svu *SpoolVendorUpdate) AddFilamentIDs(ids ...int) *SpoolVendorUpdate {
	svu.mutation.AddFilamentIDs(ids...)
	return svu
}

// AddFilaments adds the "filaments" edges to the Filament entity.
func (svu *SpoolVendorUpdate) AddFilaments(f ...*Filament) *SpoolVendorUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svu.AddFilamentIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the VendorField entity by IDs.
func (svu *SpoolVendorUpdate) AddExtraIDs(ids ...int) *SpoolVendorUpdate {
	svu.mutation.AddExtraIDs(ids...)
	return svu
}

// AddExtra adds the "extra" edges to the VendorField entity.
func (svu *SpoolVendorUpdate) AddExtra(v ...*VendorField) *SpoolVendorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return svu.AddExtraIDs(ids...)
}

// Mutation returns the SpoolVendorMutation object of the builder.
func (svu *SpoolVendorUpdate) Mutation() *SpoolVendorMutation {
	return svu.mutation
}

// ClearFilaments clears all "filaments" edges to the Filament entity.
func (svu *SpoolVendorUpdate) ClearFilaments() *SpoolVendorUpdate {
	svu.mutation.ClearFilaments()
	return svu
}

// RemoveFilamentIDs removes the "filaments" edge to Filament entities by IDs.
func (svu *SpoolVendorUpdate) RemoveFilamentIDs(ids ...int) *SpoolVendorUpdate {
	svu.mutation.RemoveFilamentIDs(ids...)
	return svu
}

// RemoveFilaments removes "filaments" edges to Filament entities.
func (svu *SpoolVendorUpdate) RemoveFilaments(f ...*Filament) *SpoolVendorUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svu.RemoveFilamentIDs(ids...)
}

// ClearExtra clears all "extra" edges to the VendorField entity.
func (svu *SpoolVendorUpdate) ClearExtra() *SpoolVendorUpdate {
	svu.mutation.ClearExtra()
	return svu
}

// RemoveExtraIDs removes the "extra" edge to VendorField entities by IDs.
func (svu *SpoolVendorUpdate) RemoveExtraIDs(ids ...int) *SpoolVendorUpdate {
	svu.mutation.RemoveExtraIDs(ids...)
	return svu
}

// RemoveExtra removes "extra" edges to VendorField entities.
func (svu *SpoolVendorUpdate) RemoveExtra(v ...*VendorField) *SpoolVendorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return svu.RemoveExtraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SpoolVendorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SpoolVendorUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SpoolVendorUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SpoolVendorUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SpoolVendorUpdate) check() error {
	if v, ok := svu.mutation.Name(); ok {
		if err := spoolvendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.name": %w`, err)}
		}
	}
	if v, ok := svu.mutation.Comment(); ok {
		if err := spoolvendor.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.comment": %w`, err)}
		}
	}
	if v, ok := svu.mutation.ExternalID(); ok {
		if err := spoolvendor.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.external_id": %w`, err)}
		}
	}
	return nil
}

func (svu *SpoolVendorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spoolvendor.Table, spoolvendor.Columns, sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Registered(); ok {
		_spec.SetField(spoolvendor.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := svu.mutation.Name(); ok {
		_spec.SetField(spoolvendor.FieldName, field.TypeString, value)
	}
	if value, ok := svu.mutation.EmptySpoolWeight(); ok {
		_spec.SetField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := svu.mutation.AddedEmptySpoolWeight(); ok {
		_spec.AddField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32, value)
	}
	if svu.mutation.EmptySpoolWeightCleared() {
		_spec.ClearField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32)
	}
	if value, ok := svu.mutation.Comment(); ok {
		_spec.SetField(spoolvendor.FieldComment, field.TypeString, value)
	}
	if svu.mutation.CommentCleared() {
		_spec.ClearField(spoolvendor.FieldComment, field.TypeString)
	}
	if value, ok := svu.mutation.ExternalID(); ok {
		_spec.SetField(spoolvendor.FieldExternalID, field.TypeString, value)
	}
	if svu.mutation.ExternalIDCleared() {
		_spec.ClearField(spoolvendor.FieldExternalID, field.TypeString)
	}
	if svu.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.RemovedFilamentsIDs(); len(nodes) > 0 && !svu.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.FilamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.RemovedExtraIDs(); len(nodes) > 0 && !svu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spoolvendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SpoolVendorUpdateOne is the builder for updating a single SpoolVendor entity.
type SpoolVendorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpoolVendorMutation
}

// SetRegistered sets the "registered" field.
func (svuo *SpoolVendorUpdateOne) SetRegistered(t time.Time) *SpoolVendorUpdateOne {
	svuo.mutation.SetRegistered(t)
	return svuo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (svuo *SpoolVendorUpdateOne) SetNillableRegistered(t *time.Time) *SpoolVendorUpdateOne {
	if t != nil {
		svuo.SetRegistered(*t)
	}
	return svuo
}

// SetName sets the "name" field.
func (svuo *SpoolVendorUpdateOne) SetName(s string) *SpoolVendorUpdateOne {
	svuo.mutation.SetName(s)
	return svuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (svuo *SpoolVendorUpdateOne) SetNillableName(s *string) *SpoolVendorUpdateOne {
	if s != nil {
		svuo.SetName(*s)
	}
	return svuo
}

// SetEmptySpoolWeight sets the "empty_spool_weight" field.
func (svuo *SpoolVendorUpdateOne) SetEmptySpoolWeight(f float32) *SpoolVendorUpdateOne {
	svuo.mutation.ResetEmptySpoolWeight()
	svuo.mutation.SetEmptySpoolWeight(f)
	return svuo
}

// SetNillableEmptySpoolWeight sets the "empty_spool_weight" field if the given value is not nil.
func (svuo *SpoolVendorUpdateOne) SetNillableEmptySpoolWeight(f *float32) *SpoolVendorUpdateOne {
	if f != nil {
		svuo.SetEmptySpoolWeight(*f)
	}
	return svuo
}

// AddEmptySpoolWeight adds f to the "empty_spool_weight" field.
func (svuo *SpoolVendorUpdateOne) AddEmptySpoolWeight(f float32) *SpoolVendorUpdateOne {
	svuo.mutation.AddEmptySpoolWeight(f)
	return svuo
}

// ClearEmptySpoolWeight clears the value of the "empty_spool_weight" field.
func (svuo *SpoolVendorUpdateOne) ClearEmptySpoolWeight() *SpoolVendorUpdateOne {
	svuo.mutation.ClearEmptySpoolWeight()
	return svuo
}

// SetComment sets the "comment" field.
func (svuo *SpoolVendorUpdateOne) SetComment(s string) *SpoolVendorUpdateOne {
	svuo.mutation.SetComment(s)
	return svuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (svuo *SpoolVendorUpdateOne) SetNillableComment(s *string) *SpoolVendorUpdateOne {
	if s != nil {
		svuo.SetComment(*s)
	}
	return svuo
}

// ClearComment clears the value of the "comment" field.
func (svuo *SpoolVendorUpdateOne) ClearComment() *SpoolVendorUpdateOne {
	svuo.mutation.ClearComment()
	return svuo
}

// SetExternalID sets the "external_id" field.
func (svuo *SpoolVendorUpdateOne) SetExternalID(s string) *SpoolVendorUpdateOne {
	svuo.mutation.SetExternalID(s)
	return svuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (svuo *SpoolVendorUpdateOne) SetNillableExternalID(s *string) *SpoolVendorUpdateOne {
	if s != nil {
		svuo.SetExternalID(*s)
	}
	return svuo
}

// ClearExternalID clears the value of the "external_id" field.
func (svuo *SpoolVendorUpdateOne) ClearExternalID() *SpoolVendorUpdateOne {
	svuo.mutation.ClearExternalID()
	return svuo
}

// AddFilamentIDs adds the "filaments" edge to the Filament entity by IDs.
func (svuo *SpoolVendorUpdateOne) AddFilamentIDs(ids ...int) *SpoolVendorUpdateOne {
	svuo.mutation.AddFilamentIDs(ids...)
	return svuo
}

// AddFilaments adds the "filaments" edges to the Filament entity.
func (svuo *SpoolVendorUpdateOne) AddFilaments(f ...*Filament) *SpoolVendorUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svuo.AddFilamentIDs(ids...)
}

// AddExtraIDs adds the "extra" edge to the VendorField entity by IDs.
func (svuo *SpoolVendorUpdateOne) AddExtraIDs(ids ...int) *SpoolVendorUpdateOne {
	svuo.mutation.AddExtraIDs(ids...)
	return svuo
}

// AddExtra adds the "extra" edges to the VendorField entity.
func (svuo *SpoolVendorUpdateOne) AddExtra(v ...*VendorField) *SpoolVendorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return svuo.AddExtraIDs(ids...)
}

// Mutation returns the SpoolVendorMutation object of the builder.
func (svuo *SpoolVendorUpdateOne) Mutation() *SpoolVendorMutation {
	return svuo.mutation
}

// ClearFilaments clears all "filaments" edges to the Filament entity.
func (svuo *SpoolVendorUpdateOne) ClearFilaments() *SpoolVendorUpdateOne {
	svuo.mutation.ClearFilaments()
	return svuo
}

// RemoveFilamentIDs removes the "filaments" edge to Filament entities by IDs.
func (svuo *SpoolVendorUpdateOne) RemoveFilamentIDs(ids ...int) *SpoolVendorUpdateOne {
	svuo.mutation.RemoveFilamentIDs(ids...)
	return svuo
}

// RemoveFilaments removes "filaments" edges to Filament entities.
func (svuo *SpoolVendorUpdateOne) RemoveFilaments(f ...*Filament) *SpoolVendorUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svuo.RemoveFilamentIDs(ids...)
}

// ClearExtra clears all "extra" edges to the VendorField entity.
func (svuo *SpoolVendorUpdateOne) ClearExtra() *SpoolVendorUpdateOne {
	svuo.mutation.ClearExtra()
	return svuo
}

// RemoveExtraIDs removes the "extra" edge to VendorField entities by IDs.
func (svuo *SpoolVendorUpdateOne) RemoveExtraIDs(ids ...int) *SpoolVendorUpdateOne {
	svuo.mutation.RemoveExtraIDs(ids...)
	return svuo
}

// RemoveExtra removes "extra" edges to VendorField entities.
func (svuo *SpoolVendorUpdateOne) RemoveExtra(v ...*VendorField) *SpoolVendorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return svuo.RemoveExtraIDs(ids...)
}

// Where appends a list predicates to the SpoolVendorUpdate builder.
func (svuo *SpoolVendorUpdateOne) Where(ps ...predicate.SpoolVendor) *SpoolVendorUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SpoolVendorUpdateOne) Select(field string, fields ...string) *SpoolVendorUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SpoolVendor entity.
func (svuo *SpoolVendorUpdateOne) Save(ctx context.Context) (*SpoolVendor, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SpoolVendorUpdateOne) SaveX(ctx context.Context) *SpoolVendor {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SpoolVendorUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SpoolVendorUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SpoolVendorUpdateOne) check() error {
	if v, ok := svuo.mutation.Name(); ok {
		if err := spoolvendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.name": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.Comment(); ok {
		if err := spoolvendor.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.comment": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.ExternalID(); ok {
		if err := spoolvendor.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "SpoolVendor.external_id": %w`, err)}
		}
	}
	return nil
}

func (svuo *SpoolVendorUpdateOne) sqlSave(ctx context.Context) (_node *SpoolVendor, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spoolvendor.Table, spoolvendor.Columns, sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpoolVendor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spoolvendor.FieldID)
		for _, f := range fields {
			if !spoolvendor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spoolvendor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Registered(); ok {
		_spec.SetField(spoolvendor.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.Name(); ok {
		_spec.SetField(spoolvendor.FieldName, field.TypeString, value)
	}
	if value, ok := svuo.mutation.EmptySpoolWeight(); ok {
		_spec.SetField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := svuo.mutation.AddedEmptySpoolWeight(); ok {
		_spec.AddField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32, value)
	}
	if svuo.mutation.EmptySpoolWeightCleared() {
		_spec.ClearField(spoolvendor.FieldEmptySpoolWeight, field.TypeFloat32)
	}
	if value, ok := svuo.mutation.Comment(); ok {
		_spec.SetField(spoolvendor.FieldComment, field.TypeString, value)
	}
	if svuo.mutation.CommentCleared() {
		_spec.ClearField(spoolvendor.FieldComment, field.TypeString)
	}
	if value, ok := svuo.mutation.ExternalID(); ok {
		_spec.SetField(spoolvendor.FieldExternalID, field.TypeString, value)
	}
	if svuo.mutation.ExternalIDCleared() {
		_spec.ClearField(spoolvendor.FieldExternalID, field.TypeString)
	}
	if svuo.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.RemovedFilamentsIDs(); len(nodes) > 0 && !svuo.mutation.FilamentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.FilamentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.FilamentsTable,
			Columns: []string{spoolvendor.FilamentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.RemovedExtraIDs(); len(nodes) > 0 && !svuo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spoolvendor.ExtraTable,
			Columns: []string{spoolvendor.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpoolVendor{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spoolvendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
