// Code generated by ent, DO NOT EDIT.

package spoolvendor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the spoolvendor type in the database.
	Label = "spool_vendor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRegistered holds the string denoting the registered field in the database.
	FieldRegistered = "registered"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmptySpoolWeight holds the string denoting the empty_spool_weight field in the database.
	FieldEmptySpoolWeight = "empty_spool_weight"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// EdgeFilaments holds the string denoting the filaments edge name in mutations.
	EdgeFilaments = "filaments"
	// EdgeExtra holds the string denoting the extra edge name in mutations.
	EdgeExtra = "extra"
	// Table holds the table name of the spoolvendor in the database.
	Table = "spool_vendors"
	// FilamentsTable is the table that holds the filaments relation/edge.
	FilamentsTable = "filaments"
	// FilamentsInverseTable is the table name for the Filament entity.
	// It exists in this package in order to avoid circular dependency with the "filament" package.
	FilamentsInverseTable = "filaments"
	// FilamentsColumn is the table column denoting the filaments relation/edge.
	FilamentsColumn = "vendor_id"
	// ExtraTable is the table that holds the extra relation/edge.
	ExtraTable = "vendor_fields"
	// ExtraInverseTable is the table name for the VendorField entity.
	// It exists in this package in order to avoid circular dependency with the "vendorfield" package.
	ExtraInverseTable = "vendor_fields"
	// ExtraColumn is the table column denoting the extra relation/edge.
	ExtraColumn = "vendor_id"
)

// Columns holds all SQL columns for spoolvendor fields.
var Columns = []string{
	FieldID,
	FieldRegistered,
	FieldName,
	FieldEmptySpoolWeight,
	FieldComment,
	FieldExternalID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the SpoolVendor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRegistered orders the results by the registered field.
func ByRegistered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistered, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmptySpoolWeight orders the results by the empty_spool_weight field.
func ByEmptySpoolWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmptySpoolWeight, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByFilamentsCount orders the results by filaments count.
func ByFilamentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilamentsStep(), opts...)
	}
}

// ByFilaments orders the results by filaments terms.
func ByFilaments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilamentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExtraCount orders the results by extra count.
func ByExtraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExtraStep(), opts...)
	}
}

// ByExtra orders the results by extra terms.
func ByExtra(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFilamentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilamentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FilamentsTable, FilamentsColumn),
	)
}
func newExtraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExtraTable, ExtraColumn),
	)
}
