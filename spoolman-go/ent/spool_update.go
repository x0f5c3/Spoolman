// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/predicate"
	"spoolman-go/ent/spool"
	"spoolman-go/ent/spoolfield"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpoolUpdate is the builder for updating Spool entities.
type SpoolUpdate struct {
	config
	hooks    []Hook
	mutation *SpoolMutation
}

// Where appends a list predicates to the SpoolUpdate builder.
func (su *SpoolUpdate) Where(ps ...predicate.Spool) *SpoolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetRegistered sets the "registered" field.
func (su *SpoolUpdate) SetRegistered(t time.Time) *SpoolUpdate {
	su.mutation.SetRegistered(t)
	return su
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableRegistered(t *time.Time) *SpoolUpdate {
	if t != nil {
		su.SetRegistered(*t)
	}
	return su
}

// SetFirstUsed sets the "first_used" field.
func (su *SpoolUpdate) SetFirstUsed(t time.Time) *SpoolUpdate {
	su.mutation.SetFirstUsed(t)
	return su
}

// SetNillableFirstUsed sets the "first_used" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableFirstUsed(t *time.Time) *SpoolUpdate {
	if t != nil {
		su.SetFirstUsed(*t)
	}
	return su
}

// ClearFirstUsed clears the value of the "first_used" field.
func (su *SpoolUpdate) ClearFirstUsed() *SpoolUpdate {
	su.mutation.ClearFirstUsed()
	return su
}

// SetLastUsed sets the "last_used" field.
func (su *SpoolUpdate) SetLastUsed(t time.Time) *SpoolUpdate {
	su.mutation.SetLastUsed(t)
	return su
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableLastUsed(t *time.Time) *SpoolUpdate {
	if t != nil {
		su.SetLastUsed(*t)
	}
	return su
}

// ClearLastUsed clears the value of the "last_used" field.
func (su *SpoolUpdate) ClearLastUsed() *SpoolUpdate {
	su.mutation.ClearLastUsed()
	return su
}

// SetPrice sets the "price" field.
func (su *SpoolUpdate) SetPrice(f float32) *SpoolUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(f)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *SpoolUpdate) SetNillablePrice(f *float32) *SpoolUpdate {
	if f != nil {
		su.SetPrice(*f)
	}
	return su
}

// AddPrice adds f to the "price" field.
func (su *SpoolUpdate) AddPrice(f float32) *SpoolUpdate {
	su.mutation.AddPrice(f)
	return su
}

// ClearPrice clears the value of the "price" field.
func (su *SpoolUpdate) ClearPrice() *SpoolUpdate {
	su.mutation.ClearPrice()
	return su
}

// SetFilamentID sets the "filament_id" field.
func (su *SpoolUpdate) SetFilamentID(i int) *SpoolUpdate {
	su.mutation.SetFilamentID(i)
	return su
}

// SetNillableFilamentID sets the "filament_id" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableFilamentID(i *int) *SpoolUpdate {
	if i != nil {
		su.SetFilamentID(*i)
	}
	return su
}

// SetInitialWeight sets the "initial_weight" field.
func (su *SpoolUpdate) SetInitialWeight(f float32) *SpoolUpdate {
	su.mutation.ResetInitialWeight()
	su.mutation.SetInitialWeight(f)
	return su
}

// SetNillableInitialWeight sets the "initial_weight" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableInitialWeight(f *float32) *SpoolUpdate {
	if f != nil {
		su.SetInitialWeight(*f)
	}
	return su
}

// AddInitialWeight adds f to the "initial_weight" field.
func (su *SpoolUpdate) AddInitialWeight(f float32) *SpoolUpdate {
	su.mutation.AddInitialWeight(f)
	return su
}

// ClearInitialWeight clears the value of the "initial_weight" field.
func (su *SpoolUpdate) ClearInitialWeight() *SpoolUpdate {
	su.mutation.ClearInitialWeight()
	return su
}

// SetSpoolWeight sets the "spool_weight" field.
func (su *SpoolUpdate) SetSpoolWeight(f float32) *SpoolUpdate {
	su.mutation.ResetSpoolWeight()
	su.mutation.SetSpoolWeight(f)
	return su
}

// SetNillableSpoolWeight sets the "spool_weight" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableSpoolWeight(f *float32) *SpoolUpdate {
	if f != nil {
		su.SetSpoolWeight(*f)
	}
	return su
}

// AddSpoolWeight adds f to the "spool_weight" field.
func (su *SpoolUpdate) AddSpoolWeight(f float32) *SpoolUpdate {
	su.mutation.AddSpoolWeight(f)
	return su
}

// ClearSpoolWeight clears the value of the "spool_weight" field.
func (su *SpoolUpdate) ClearSpoolWeight() *SpoolUpdate {
	su.mutation.ClearSpoolWeight()
	return su
}

// SetUsedWeight sets the "used_weight" field.
func (su *SpoolUpdate) SetUsedWeight(f float32) *SpoolUpdate {
	su.mutation.ResetUsedWeight()
	su.mutation.SetUsedWeight(f)
	return su
}

// SetNillableUsedWeight sets the "used_weight" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableUsedWeight(f *float32) *SpoolUpdate {
	if f != nil {
		su.SetUsedWeight(*f)
	}
	return su
}

// AddUsedWeight adds f to the "used_weight" field.
func (su *SpoolUpdate) AddUsedWeight(f float32) *SpoolUpdate {
	su.mutation.AddUsedWeight(f)
	return su
}

// SetRemainingWeight sets the "remaining_weight" field.
func (su *SpoolUpdate) SetRemainingWeight(f float32) *SpoolUpdate {
	su.mutation.ResetRemainingWeight()
	su.mutation.SetRemainingWeight(f)
	return su
}

// SetNillableRemainingWeight sets the "remaining_weight" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableRemainingWeight(f *float32) *SpoolUpdate {
	if f != nil {
		su.SetRemainingWeight(*f)
	}
	return su
}

// AddRemainingWeight adds f to the "remaining_weight" field.
func (su *SpoolUpdate) AddRemainingWeight(f float32) *SpoolUpdate {
	su.mutation.AddRemainingWeight(f)
	return su
}

// SetLocation sets the "location" field.
func (su *SpoolUpdate) SetLocation(s string) *SpoolUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableLocation(s *string) *SpoolUpdate {
	if s != nil {
		su.SetLocation(*s)
	}
	return su
}

// ClearLocation clears the value of the "location" field.
func (su *SpoolUpdate) ClearLocation() *SpoolUpdate {
	su.mutation.ClearLocation()
	return su
}

// SetLotNr sets the "lot_nr" field.
func (su *SpoolUpdate) SetLotNr(s string) *SpoolUpdate {
	su.mutation.SetLotNr(s)
	return su
}

// SetNillableLotNr sets the "lot_nr" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableLotNr(s *string) *SpoolUpdate {
	if s != nil {
		su.SetLotNr(*s)
	}
	return su
}

// ClearLotNr clears the value of the "lot_nr" field.
func (su *SpoolUpdate) ClearLotNr() *SpoolUpdate {
	su.mutation.ClearLotNr()
	return su
}

// SetComment sets the "comment" field.
func (su *SpoolUpdate) SetComment(s string) *SpoolUpdate {
	su.mutation.SetComment(s)
	return su
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableComment(s *string) *SpoolUpdate {
	if s != nil {
		su.SetComment(*s)
	}
	return su
}

// ClearComment clears the value of the "comment" field.
func (su *SpoolUpdate) ClearComment() *SpoolUpdate {
	su.mutation.ClearComment()
	return su
}

// SetArchived sets the "archived" field.
func (su *SpoolUpdate) SetArchived(b bool) *SpoolUpdate {
	su.mutation.SetArchived(b)
	return su
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (su *SpoolUpdate) SetNillableArchived(b *bool) *SpoolUpdate {
	if b != nil {
		su.SetArchived(*b)
	}
	return su
}

// ClearArchived clears the value of the "archived" field.
func (su *SpoolUpdate) ClearArchived() *SpoolUpdate {
	su.mutation.ClearArchived()
	return su
}

// SetFilament sets the "filament" edge to the Filament entity.
func (su *SpoolUpdate) SetFilament(f *Filament) *SpoolUpdate {
	return su.SetFilamentID(f.ID)
}

// AddExtraIDs adds the "extra" edge to the SpoolField entity by IDs.
func (su *SpoolUpdate) AddExtraIDs(ids ...int) *SpoolUpdate {
	su.mutation.AddExtraIDs(ids...)
	return su
}

// AddExtra adds the "extra" edges to the SpoolField entity.
func (su *SpoolUpdate) AddExtra(s ...*SpoolField) *SpoolUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddExtraIDs(ids...)
}

// Mutation returns the SpoolMutation object of the builder.
func (su *SpoolUpdate) Mutation() *SpoolMutation {
	return su.mutation
}

// ClearFilament clears the "filament" edge to the Filament entity.
func (su *SpoolUpdate) ClearFilament() *SpoolUpdate {
	su.mutation.ClearFilament()
	return su
}

// ClearExtra clears all "extra" edges to the SpoolField entity.
func (su *SpoolUpdate) ClearExtra() *SpoolUpdate {
	su.mutation.ClearExtra()
	return su
}

// RemoveExtraIDs removes the "extra" edge to SpoolField entities by IDs.
func (su *SpoolUpdate) RemoveExtraIDs(ids ...int) *SpoolUpdate {
	su.mutation.RemoveExtraIDs(ids...)
	return su
}

// RemoveExtra removes "extra" edges to SpoolField entities.
func (su *SpoolUpdate) RemoveExtra(s ...*SpoolField) *SpoolUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveExtraIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpoolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpoolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpoolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SpoolUpdate) check() error {
	if v, ok := su.mutation.RemainingWeight(); ok {
		if err := spool.RemainingWeightValidator(v); err != nil {
			return &ValidationError{Name: "remaining_weight", err: fmt.Errorf(`ent: validator failed for field "Spool.remaining_weight": %w`, err)}
		}
	}
	if v, ok := su.mutation.Location(); ok {
		if err := spool.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Spool.location": %w`, err)}
		}
	}
	if v, ok := su.mutation.LotNr(); ok {
		if err := spool.LotNrValidator(v); err != nil {
			return &ValidationError{Name: "lot_nr", err: fmt.Errorf(`ent: validator failed for field "Spool.lot_nr": %w`, err)}
		}
	}
	if v, ok := su.mutation.Comment(); ok {
		if err := spool.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Spool.comment": %w`, err)}
		}
	}
	if su.mutation.FilamentCleared() && len(su.mutation.FilamentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Spool.filament"`)
	}
	return nil
}

func (su *SpoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spool.Table, spool.Columns, sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Registered(); ok {
		_spec.SetField(spool.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := su.mutation.FirstUsed(); ok {
		_spec.SetField(spool.FieldFirstUsed, field.TypeTime, value)
	}
	if su.mutation.FirstUsedCleared() {
		_spec.ClearField(spool.FieldFirstUsed, field.TypeTime)
	}
	if value, ok := su.mutation.LastUsed(); ok {
		_spec.SetField(spool.FieldLastUsed, field.TypeTime, value)
	}
	if su.mutation.LastUsedCleared() {
		_spec.ClearField(spool.FieldLastUsed, field.TypeTime)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(spool.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(spool.FieldPrice, field.TypeFloat32, value)
	}
	if su.mutation.PriceCleared() {
		_spec.ClearField(spool.FieldPrice, field.TypeFloat32)
	}
	if value, ok := su.mutation.InitialWeight(); ok {
		_spec.SetField(spool.FieldInitialWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedInitialWeight(); ok {
		_spec.AddField(spool.FieldInitialWeight, field.TypeFloat32, value)
	}
	if su.mutation.InitialWeightCleared() {
		_spec.ClearField(spool.FieldInitialWeight, field.TypeFloat32)
	}
	if value, ok := su.mutation.SpoolWeight(); ok {
		_spec.SetField(spool.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedSpoolWeight(); ok {
		_spec.AddField(spool.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if su.mutation.SpoolWeightCleared() {
		_spec.ClearField(spool.FieldSpoolWeight, field.TypeFloat32)
	}
	if value, ok := su.mutation.UsedWeight(); ok {
		_spec.SetField(spool.FieldUsedWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedUsedWeight(); ok {
		_spec.AddField(spool.FieldUsedWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.RemainingWeight(); ok {
		_spec.SetField(spool.FieldRemainingWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedRemainingWeight(); ok {
		_spec.AddField(spool.FieldRemainingWeight, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.SetField(spool.FieldLocation, field.TypeString, value)
	}
	if su.mutation.LocationCleared() {
		_spec.ClearField(spool.FieldLocation, field.TypeString)
	}
	if value, ok := su.mutation.LotNr(); ok {
		_spec.SetField(spool.FieldLotNr, field.TypeString, value)
	}
	if su.mutation.LotNrCleared() {
		_spec.ClearField(spool.FieldLotNr, field.TypeString)
	}
	if value, ok := su.mutation.Comment(); ok {
		_spec.SetField(spool.FieldComment, field.TypeString, value)
	}
	if su.mutation.CommentCleared() {
		_spec.ClearField(spool.FieldComment, field.TypeString)
	}
	if value, ok := su.mutation.Archived(); ok {
		_spec.SetField(spool.FieldArchived, field.TypeBool, value)
	}
	if su.mutation.ArchivedCleared() {
		_spec.ClearField(spool.FieldArchived, field.TypeBool)
	}
	if su.mutation.FilamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spool.FilamentTable,
			Columns: []string{spool.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FilamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spool.FilamentTable,
			Columns: []string{spool.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedExtraIDs(); len(nodes) > 0 && !su.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SpoolUpdateOne is the builder for updating a single Spool entity.
type SpoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpoolMutation
}

// SetRegistered sets the "registered" field.
func (suo *SpoolUpdateOne) SetRegistered(t time.Time) *SpoolUpdateOne {
	suo.mutation.SetRegistered(t)
	return suo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableRegistered(t *time.Time) *SpoolUpdateOne {
	if t != nil {
		suo.SetRegistered(*t)
	}
	return suo
}

// SetFirstUsed sets the "first_used" field.
func (suo *SpoolUpdateOne) SetFirstUsed(t time.Time) *SpoolUpdateOne {
	suo.mutation.SetFirstUsed(t)
	return suo
}

// SetNillableFirstUsed sets the "first_used" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableFirstUsed(t *time.Time) *SpoolUpdateOne {
	if t != nil {
		suo.SetFirstUsed(*t)
	}
	return suo
}

// ClearFirstUsed clears the value of the "first_used" field.
func (suo *SpoolUpdateOne) ClearFirstUsed() *SpoolUpdateOne {
	suo.mutation.ClearFirstUsed()
	return suo
}

// SetLastUsed sets the "last_used" field.
func (suo *SpoolUpdateOne) SetLastUsed(t time.Time) *SpoolUpdateOne {
	suo.mutation.SetLastUsed(t)
	return suo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableLastUsed(t *time.Time) *SpoolUpdateOne {
	if t != nil {
		suo.SetLastUsed(*t)
	}
	return suo
}

// ClearLastUsed clears the value of the "last_used" field.
func (suo *SpoolUpdateOne) ClearLastUsed() *SpoolUpdateOne {
	suo.mutation.ClearLastUsed()
	return suo
}

// SetPrice sets the "price" field.
func (suo *SpoolUpdateOne) SetPrice(f float32) *SpoolUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(f)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillablePrice(f *float32) *SpoolUpdateOne {
	if f != nil {
		suo.SetPrice(*f)
	}
	return suo
}

// AddPrice adds f to the "price" field.
func (suo *SpoolUpdateOne) AddPrice(f float32) *SpoolUpdateOne {
	suo.mutation.AddPrice(f)
	return suo
}

// ClearPrice clears the value of the "price" field.
func (suo *SpoolUpdateOne) ClearPrice() *SpoolUpdateOne {
	suo.mutation.ClearPrice()
	return suo
}

// SetFilamentID sets the "filament_id" field.
func (suo *SpoolUpdateOne) SetFilamentID(i int) *SpoolUpdateOne {
	suo.mutation.SetFilamentID(i)
	return suo
}

// SetNillableFilamentID sets the "filament_id" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableFilamentID(i *int) *SpoolUpdateOne {
	if i != nil {
		suo.SetFilamentID(*i)
	}
	return suo
}

// SetInitialWeight sets the "initial_weight" field.
func (suo *SpoolUpdateOne) SetInitialWeight(f float32) *SpoolUpdateOne {
	suo.mutation.ResetInitialWeight()
	suo.mutation.SetInitialWeight(f)
	return suo
}

// SetNillableInitialWeight sets the "initial_weight" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableInitialWeight(f *float32) *SpoolUpdateOne {
	if f != nil {
		suo.SetInitialWeight(*f)
	}
	return suo
}

// AddInitialWeight adds f to the "initial_weight" field.
func (suo *SpoolUpdateOne) AddInitialWeight(f float32) *SpoolUpdateOne {
	suo.mutation.AddInitialWeight(f)
	return suo
}

// ClearInitialWeight clears the value of the "initial_weight" field.
func (suo *SpoolUpdateOne) ClearInitialWeight() *SpoolUpdateOne {
	suo.mutation.ClearInitialWeight()
	return suo
}

// SetSpoolWeight sets the "spool_weight" field.
func (suo *SpoolUpdateOne) SetSpoolWeight(f float32) *SpoolUpdateOne {
	suo.mutation.ResetSpoolWeight()
	suo.mutation.SetSpoolWeight(f)
	return suo
}

// SetNillableSpoolWeight sets the "spool_weight" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableSpoolWeight(f *float32) *SpoolUpdateOne {
	if f != nil {
		suo.SetSpoolWeight(*f)
	}
	return suo
}

// AddSpoolWeight adds f to the "spool_weight" field.
func (suo *SpoolUpdateOne) AddSpoolWeight(f float32) *SpoolUpdateOne {
	suo.mutation.AddSpoolWeight(f)
	return suo
}

// ClearSpoolWeight clears the value of the "spool_weight" field.
func (suo *SpoolUpdateOne) ClearSpoolWeight() *SpoolUpdateOne {
	suo.mutation.ClearSpoolWeight()
	return suo
}

// SetUsedWeight sets the "used_weight" field.
func (suo *SpoolUpdateOne) SetUsedWeight(f float32) *SpoolUpdateOne {
	suo.mutation.ResetUsedWeight()
	suo.mutation.SetUsedWeight(f)
	return suo
}

// SetNillableUsedWeight sets the "used_weight" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableUsedWeight(f *float32) *SpoolUpdateOne {
	if f != nil {
		suo.SetUsedWeight(*f)
	}
	return suo
}

// AddUsedWeight adds f to the "used_weight" field.
func (suo *SpoolUpdateOne) AddUsedWeight(f float32) *SpoolUpdateOne {
	suo.mutation.AddUsedWeight(f)
	return suo
}

// SetRemainingWeight sets the "remaining_weight" field.
func (suo *SpoolUpdateOne) SetRemainingWeight(f float32) *SpoolUpdateOne {
	suo.mutation.ResetRemainingWeight()
	suo.mutation.SetRemainingWeight(f)
	return suo
}

// SetNillableRemainingWeight sets the "remaining_weight" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableRemainingWeight(f *float32) *SpoolUpdateOne {
	if f != nil {
		suo.SetRemainingWeight(*f)
	}
	return suo
}

// AddRemainingWeight adds f to the "remaining_weight" field.
func (suo *SpoolUpdateOne) AddRemainingWeight(f float32) *SpoolUpdateOne {
	suo.mutation.AddRemainingWeight(f)
	return suo
}

// SetLocation sets the "location" field.
func (suo *SpoolUpdateOne) SetLocation(s string) *SpoolUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableLocation(s *string) *SpoolUpdateOne {
	if s != nil {
		suo.SetLocation(*s)
	}
	return suo
}

// ClearLocation clears the value of the "location" field.
func (suo *SpoolUpdateOne) ClearLocation() *SpoolUpdateOne {
	suo.mutation.ClearLocation()
	return suo
}

// SetLotNr sets the "lot_nr" field.
func (suo *SpoolUpdateOne) SetLotNr(s string) *SpoolUpdateOne {
	suo.mutation.SetLotNr(s)
	return suo
}

// SetNillableLotNr sets the "lot_nr" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableLotNr(s *string) *SpoolUpdateOne {
	if s != nil {
		suo.SetLotNr(*s)
	}
	return suo
}

// ClearLotNr clears the value of the "lot_nr" field.
func (suo *SpoolUpdateOne) ClearLotNr() *SpoolUpdateOne {
	suo.mutation.ClearLotNr()
	return suo
}

// SetComment sets the "comment" field.
func (suo *SpoolUpdateOne) SetComment(s string) *SpoolUpdateOne {
	suo.mutation.SetComment(s)
	return suo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableComment(s *string) *SpoolUpdateOne {
	if s != nil {
		suo.SetComment(*s)
	}
	return suo
}

// ClearComment clears the value of the "comment" field.
func (suo *SpoolUpdateOne) ClearComment() *SpoolUpdateOne {
	suo.mutation.ClearComment()
	return suo
}

// SetArchived sets the "archived" field.
func (suo *SpoolUpdateOne) SetArchived(b bool) *SpoolUpdateOne {
	suo.mutation.SetArchived(b)
	return suo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (suo *SpoolUpdateOne) SetNillableArchived(b *bool) *SpoolUpdateOne {
	if b != nil {
		suo.SetArchived(*b)
	}
	return suo
}

// ClearArchived clears the value of the "archived" field.
func (suo *SpoolUpdateOne) ClearArchived() *SpoolUpdateOne {
	suo.mutation.ClearArchived()
	return suo
}

// SetFilament sets the "filament" edge to the Filament entity.
func (suo *SpoolUpdateOne) SetFilament(f *Filament) *SpoolUpdateOne {
	return suo.SetFilamentID(f.ID)
}

// AddExtraIDs adds the "extra" edge to the SpoolField entity by IDs.
func (suo *SpoolUpdateOne) AddExtraIDs(ids ...int) *SpoolUpdateOne {
	suo.mutation.AddExtraIDs(ids...)
	return suo
}

// AddExtra adds the "extra" edges to the SpoolField entity.
func (suo *SpoolUpdateOne) AddExtra(s ...*SpoolField) *SpoolUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddExtraIDs(ids...)
}

// Mutation returns the SpoolMutation object of the builder.
func (suo *SpoolUpdateOne) Mutation() *SpoolMutation {
	return suo.mutation
}

// ClearFilament clears the "filament" edge to the Filament entity.
func (suo *SpoolUpdateOne) ClearFilament() *SpoolUpdateOne {
	suo.mutation.ClearFilament()
	return suo
}

// ClearExtra clears all "extra" edges to the SpoolField entity.
func (suo *SpoolUpdateOne) ClearExtra() *SpoolUpdateOne {
	suo.mutation.ClearExtra()
	return suo
}

// RemoveExtraIDs removes the "extra" edge to SpoolField entities by IDs.
func (suo *SpoolUpdateOne) RemoveExtraIDs(ids ...int) *SpoolUpdateOne {
	suo.mutation.RemoveExtraIDs(ids...)
	return suo
}

// RemoveExtra removes "extra" edges to SpoolField entities.
func (suo *SpoolUpdateOne) RemoveExtra(s ...*SpoolField) *SpoolUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveExtraIDs(ids...)
}

// Where appends a list predicates to the SpoolUpdate builder.
func (suo *SpoolUpdateOne) Where(ps ...predicate.Spool) *SpoolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpoolUpdateOne) Select(field string, fields ...string) *SpoolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Spool entity.
func (suo *SpoolUpdateOne) Save(ctx context.Context) (*Spool, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpoolUpdateOne) SaveX(ctx context.Context) *Spool {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpoolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpoolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SpoolUpdateOne) check() error {
	if v, ok := suo.mutation.RemainingWeight(); ok {
		if err := spool.RemainingWeightValidator(v); err != nil {
			return &ValidationError{Name: "remaining_weight", err: fmt.Errorf(`ent: validator failed for field "Spool.remaining_weight": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Location(); ok {
		if err := spool.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Spool.location": %w`, err)}
		}
	}
	if v, ok := suo.mutation.LotNr(); ok {
		if err := spool.LotNrValidator(v); err != nil {
			return &ValidationError{Name: "lot_nr", err: fmt.Errorf(`ent: validator failed for field "Spool.lot_nr": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Comment(); ok {
		if err := spool.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Spool.comment": %w`, err)}
		}
	}
	if suo.mutation.FilamentCleared() && len(suo.mutation.FilamentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Spool.filament"`)
	}
	return nil
}

func (suo *SpoolUpdateOne) sqlSave(ctx context.Context) (_node *Spool, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spool.Table, spool.Columns, sqlgraph.NewFieldSpec(spool.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Spool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spool.FieldID)
		for _, f := range fields {
			if !spool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Registered(); ok {
		_spec.SetField(spool.FieldRegistered, field.TypeTime, value)
	}
	if value, ok := suo.mutation.FirstUsed(); ok {
		_spec.SetField(spool.FieldFirstUsed, field.TypeTime, value)
	}
	if suo.mutation.FirstUsedCleared() {
		_spec.ClearField(spool.FieldFirstUsed, field.TypeTime)
	}
	if value, ok := suo.mutation.LastUsed(); ok {
		_spec.SetField(spool.FieldLastUsed, field.TypeTime, value)
	}
	if suo.mutation.LastUsedCleared() {
		_spec.ClearField(spool.FieldLastUsed, field.TypeTime)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(spool.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(spool.FieldPrice, field.TypeFloat32, value)
	}
	if suo.mutation.PriceCleared() {
		_spec.ClearField(spool.FieldPrice, field.TypeFloat32)
	}
	if value, ok := suo.mutation.InitialWeight(); ok {
		_spec.SetField(spool.FieldInitialWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedInitialWeight(); ok {
		_spec.AddField(spool.FieldInitialWeight, field.TypeFloat32, value)
	}
	if suo.mutation.InitialWeightCleared() {
		_spec.ClearField(spool.FieldInitialWeight, field.TypeFloat32)
	}
	if value, ok := suo.mutation.SpoolWeight(); ok {
		_spec.SetField(spool.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedSpoolWeight(); ok {
		_spec.AddField(spool.FieldSpoolWeight, field.TypeFloat32, value)
	}
	if suo.mutation.SpoolWeightCleared() {
		_spec.ClearField(spool.FieldSpoolWeight, field.TypeFloat32)
	}
	if value, ok := suo.mutation.UsedWeight(); ok {
		_spec.SetField(spool.FieldUsedWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedUsedWeight(); ok {
		_spec.AddField(spool.FieldUsedWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.RemainingWeight(); ok {
		_spec.SetField(spool.FieldRemainingWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedRemainingWeight(); ok {
		_spec.AddField(spool.FieldRemainingWeight, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.SetField(spool.FieldLocation, field.TypeString, value)
	}
	if suo.mutation.LocationCleared() {
		_spec.ClearField(spool.FieldLocation, field.TypeString)
	}
	if value, ok := suo.mutation.LotNr(); ok {
		_spec.SetField(spool.FieldLotNr, field.TypeString, value)
	}
	if suo.mutation.LotNrCleared() {
		_spec.ClearField(spool.FieldLotNr, field.TypeString)
	}
	if value, ok := suo.mutation.Comment(); ok {
		_spec.SetField(spool.FieldComment, field.TypeString, value)
	}
	if suo.mutation.CommentCleared() {
		_spec.ClearField(spool.FieldComment, field.TypeString)
	}
	if value, ok := suo.mutation.Archived(); ok {
		_spec.SetField(spool.FieldArchived, field.TypeBool, value)
	}
	if suo.mutation.ArchivedCleared() {
		_spec.ClearField(spool.FieldArchived, field.TypeBool)
	}
	if suo.mutation.FilamentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spool.FilamentTable,
			Columns: []string{spool.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FilamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spool.FilamentTable,
			Columns: []string{spool.FilamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filament.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedExtraIDs(); len(nodes) > 0 && !suo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spool.ExtraTable,
			Columns: []string{spool.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Spool{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
