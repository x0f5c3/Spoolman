// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spoolman-go/ent/spoolvendor"
	"spoolman-go/ent/vendorfield"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorFieldCreate is the builder for creating a VendorField entity.
type VendorFieldCreate struct {
	config
	mutation *VendorFieldMutation
	hooks    []Hook
}

// SetVendorID sets the "vendor_id" field.
func (vfc *VendorFieldCreate) SetVendorID(i int) *VendorFieldCreate {
	vfc.mutation.SetVendorID(i)
	return vfc
}

// SetKey sets the "key" field.
func (vfc *VendorFieldCreate) SetKey(s string) *VendorFieldCreate {
	vfc.mutation.SetKey(s)
	return vfc
}

// SetValue sets the "value" field.
func (vfc *VendorFieldCreate) SetValue(s string) *VendorFieldCreate {
	vfc.mutation.SetValue(s)
	return vfc
}

// SetVendor sets the "vendor" edge to the SpoolVendor entity.
func (vfc *VendorFieldCreate) SetVendor(s *SpoolVendor) *VendorFieldCreate {
	return vfc.SetVendorID(s.ID)
}

// Mutation returns the VendorFieldMutation object of the builder.
func (vfc *VendorFieldCreate) Mutation() *VendorFieldMutation {
	return vfc.mutation
}

// Save creates the VendorField in the database.
func (vfc *VendorFieldCreate) Save(ctx context.Context) (*VendorField, error) {
	return withHooks(ctx, vfc.sqlSave, vfc.mutation, vfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vfc *VendorFieldCreate) SaveX(ctx context.Context) *VendorField {
	v, err := vfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vfc *VendorFieldCreate) Exec(ctx context.Context) error {
	_, err := vfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vfc *VendorFieldCreate) ExecX(ctx context.Context) {
	if err := vfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vfc *VendorFieldCreate) check() error {
	if _, ok := vfc.mutation.VendorID(); !ok {
		return &ValidationError{Name: "vendor_id", err: errors.New(`ent: missing required field "VendorField.vendor_id"`)}
	}
	if _, ok := vfc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "VendorField.key"`)}
	}
	if v, ok := vfc.mutation.Key(); ok {
		if err := vendorfield.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "VendorField.key": %w`, err)}
		}
	}
	if _, ok := vfc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "VendorField.value"`)}
	}
	if len(vfc.mutation.VendorIDs()) == 0 {
		return &ValidationError{Name: "vendor", err: errors.New(`ent: missing required edge "VendorField.vendor"`)}
	}
	return nil
}

func (vfc *VendorFieldCreate) sqlSave(ctx context.Context) (*VendorField, error) {
	if err := vfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vfc.mutation.id = &_node.ID
	vfc.mutation.done = true
	return _node, nil
}

func (vfc *VendorFieldCreate) createSpec() (*VendorField, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorField{config: vfc.config}
		_spec = sqlgraph.NewCreateSpec(vendorfield.Table, sqlgraph.NewFieldSpec(vendorfield.FieldID, field.TypeInt))
	)
	if value, ok := vfc.mutation.Key(); ok {
		_spec.SetField(vendorfield.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := vfc.mutation.Value(); ok {
		_spec.SetField(vendorfield.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := vfc.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorfield.VendorTable,
			Columns: []string{vendorfield.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spoolvendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorFieldCreateBulk is the builder for creating many VendorField entities in bulk.
type VendorFieldCreateBulk struct {
	config
	err      error
	builders []*VendorFieldCreate
}

// Save creates the VendorField entities in the database.
func (vfcb *VendorFieldCreateBulk) Save(ctx context.Context) ([]*VendorField, error) {
	if vfcb.err != nil {
		return nil, vfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vfcb.builders))
	nodes := make([]*VendorField, len(vfcb.builders))
	mutators := make([]Mutator, len(vfcb.builders))
	for i := range vfcb.builders {
		func(i int, root context.Context) {
			builder := vfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vfcb *VendorFieldCreateBulk) SaveX(ctx context.Context) []*VendorField {
	v, err := vfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vfcb *VendorFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := vfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vfcb *VendorFieldCreateBulk) ExecX(ctx context.Context) {
	if err := vfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
