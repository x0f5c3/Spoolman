// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/spoolvendor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Filament is the model entity for the Filament schema.
type Filament struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Registered holds the value of the "registered" field.
	Registered time.Time `json:"registered,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// VendorID holds the value of the "vendor_id" field.
	VendorID int `json:"vendor_id,omitempty"`
	// Material holds the value of the "material" field.
	Material string `json:"material,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// Density holds the value of the "density" field.
	Density float32 `json:"density,omitempty"`
	// Diameter holds the value of the "diameter" field.
	Diameter float32 `json:"diameter,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float32 `json:"weight,omitempty"`
	// SpoolWeight holds the value of the "spool_weight" field.
	SpoolWeight float32 `json:"spool_weight,omitempty"`
	// ArticleNumber holds the value of the "article_number" field.
	ArticleNumber string `json:"article_number,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// SettingsExtruderTemp holds the value of the "settings_extruder_temp" field.
	SettingsExtruderTemp int `json:"settings_extruder_temp,omitempty"`
	// SettingsBedTemp holds the value of the "settings_bed_temp" field.
	SettingsBedTemp int `json:"settings_bed_temp,omitempty"`
	// ColorHex holds the value of the "color_hex" field.
	ColorHex string `json:"color_hex,omitempty"`
	// MultiColorHexes holds the value of the "multi_color_hexes" field.
	MultiColorHexes string `json:"multi_color_hexes,omitempty"`
	// MultiColorDirection holds the value of the "multi_color_direction" field.
	MultiColorDirection string `json:"multi_color_direction,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilamentQuery when eager-loading is set.
	Edges        FilamentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FilamentEdges holds the relations/edges for other nodes in the graph.
type FilamentEdges struct {
	// Vendor holds the value of the vendor edge.
	Vendor *SpoolVendor `json:"vendor,omitempty"`
	// Spools holds the value of the spools edge.
	Spools []*Spool `json:"spools,omitempty"`
	// Extra holds the value of the extra edge.
	Extra []*FilamentField `json:"extra,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilamentEdges) VendorOrErr() (*SpoolVendor, error) {
	if e.Vendor != nil {
		return e.Vendor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: spoolvendor.Label}
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// SpoolsOrErr returns the Spools value or an error if the edge
// was not loaded in eager-loading.
func (e FilamentEdges) SpoolsOrErr() ([]*Spool, error) {
	if e.loadedTypes[1] {
		return e.Spools, nil
	}
	return nil, &NotLoadedError{edge: "spools"}
}

// ExtraOrErr returns the Extra value or an error if the edge
// was not loaded in eager-loading.
func (e FilamentEdges) ExtraOrErr() ([]*FilamentField, error) {
	if e.loadedTypes[2] {
		return e.Extra, nil
	}
	return nil, &NotLoadedError{edge: "extra"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Filament) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filament.FieldPrice, filament.FieldDensity, filament.FieldDiameter, filament.FieldWeight, filament.FieldSpoolWeight:
			values[i] = new(sql.NullFloat64)
		case filament.FieldID, filament.FieldVendorID, filament.FieldSettingsExtruderTemp, filament.FieldSettingsBedTemp:
			values[i] = new(sql.NullInt64)
		case filament.FieldName, filament.FieldMaterial, filament.FieldArticleNumber, filament.FieldComment, filament.FieldColorHex, filament.FieldMultiColorHexes, filament.FieldMultiColorDirection, filament.FieldExternalID:
			values[i] = new(sql.NullString)
		case filament.FieldRegistered:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Filament fields.
func (f *Filament) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filament.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case filament.FieldRegistered:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered", values[i])
			} else if value.Valid {
				f.Registered = value.Time
			}
		case filament.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case filament.FieldVendorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				f.VendorID = int(value.Int64)
			}
		case filament.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				f.Material = value.String
			}
		case filament.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				f.Price = float32(value.Float64)
			}
		case filament.FieldDensity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field density", values[i])
			} else if value.Valid {
				f.Density = float32(value.Float64)
			}
		case filament.FieldDiameter:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diameter", values[i])
			} else if value.Valid {
				f.Diameter = float32(value.Float64)
			}
		case filament.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				f.Weight = float32(value.Float64)
			}
		case filament.FieldSpoolWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field spool_weight", values[i])
			} else if value.Valid {
				f.SpoolWeight = float32(value.Float64)
			}
		case filament.FieldArticleNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field article_number", values[i])
			} else if value.Valid {
				f.ArticleNumber = value.String
			}
		case filament.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				f.Comment = value.String
			}
		case filament.FieldSettingsExtruderTemp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field settings_extruder_temp", values[i])
			} else if value.Valid {
				f.SettingsExtruderTemp = int(value.Int64)
			}
		case filament.FieldSettingsBedTemp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field settings_bed_temp", values[i])
			} else if value.Valid {
				f.SettingsBedTemp = int(value.Int64)
			}
		case filament.FieldColorHex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_hex", values[i])
			} else if value.Valid {
				f.ColorHex = value.String
			}
		case filament.FieldMultiColorHexes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field multi_color_hexes", values[i])
			} else if value.Valid {
				f.MultiColorHexes = value.String
			}
		case filament.FieldMultiColorDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field multi_color_direction", values[i])
			} else if value.Valid {
				f.MultiColorDirection = value.String
			}
		case filament.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				f.ExternalID = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Filament.
// This includes values selected through modifiers, order, etc.
func (f *Filament) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryVendor queries the "vendor" edge of the Filament entity.
func (f *Filament) QueryVendor() *SpoolVendorQuery {
	return NewFilamentClient(f.config).QueryVendor(f)
}

// QuerySpools queries the "spools" edge of the Filament entity.
func (f *Filament) QuerySpools() *SpoolQuery {
	return NewFilamentClient(f.config).QuerySpools(f)
}

// QueryExtra queries the "extra" edge of the Filament entity.
func (f *Filament) QueryExtra() *FilamentFieldQuery {
	return NewFilamentClient(f.config).QueryExtra(f)
}

// Update returns a builder for updating this Filament.
// Note that you need to call Filament.Unwrap() before calling this method if this Filament
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Filament) Update() *FilamentUpdateOne {
	return NewFilamentClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Filament entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Filament) Unwrap() *Filament {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Filament is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Filament) String() string {
	var builder strings.Builder
	builder.WriteString("Filament(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("registered=")
	builder.WriteString(f.Registered.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("vendor_id=")
	builder.WriteString(fmt.Sprintf("%v", f.VendorID))
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(f.Material)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", f.Price))
	builder.WriteString(", ")
	builder.WriteString("density=")
	builder.WriteString(fmt.Sprintf("%v", f.Density))
	builder.WriteString(", ")
	builder.WriteString("diameter=")
	builder.WriteString(fmt.Sprintf("%v", f.Diameter))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", f.Weight))
	builder.WriteString(", ")
	builder.WriteString("spool_weight=")
	builder.WriteString(fmt.Sprintf("%v", f.SpoolWeight))
	builder.WriteString(", ")
	builder.WriteString("article_number=")
	builder.WriteString(f.ArticleNumber)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(f.Comment)
	builder.WriteString(", ")
	builder.WriteString("settings_extruder_temp=")
	builder.WriteString(fmt.Sprintf("%v", f.SettingsExtruderTemp))
	builder.WriteString(", ")
	builder.WriteString("settings_bed_temp=")
	builder.WriteString(fmt.Sprintf("%v", f.SettingsBedTemp))
	builder.WriteString(", ")
	builder.WriteString("color_hex=")
	builder.WriteString(f.ColorHex)
	builder.WriteString(", ")
	builder.WriteString("multi_color_hexes=")
	builder.WriteString(f.MultiColorHexes)
	builder.WriteString(", ")
	builder.WriteString("multi_color_direction=")
	builder.WriteString(f.MultiColorDirection)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(f.ExternalID)
	builder.WriteByte(')')
	return builder.String()
}

// Filaments is a parsable slice of Filament.
type Filaments []*Filament
