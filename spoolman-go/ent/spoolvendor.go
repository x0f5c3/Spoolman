// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/spoolvendor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpoolVendor is the model entity for the SpoolVendor schema.
type SpoolVendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Registered holds the value of the "registered" field.
	Registered time.Time `json:"registered,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EmptySpoolWeight holds the value of the "empty_spool_weight" field.
	EmptySpoolWeight float32 `json:"empty_spool_weight,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpoolVendorQuery when eager-loading is set.
	Edges        SpoolVendorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SpoolVendorEdges holds the relations/edges for other nodes in the graph.
type SpoolVendorEdges struct {
	// Filaments holds the value of the filaments edge.
	Filaments []*Filament `json:"filaments,omitempty"`
	// Extra holds the value of the extra edge.
	Extra []*VendorField `json:"extra,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FilamentsOrErr returns the Filaments value or an error if the edge
// was not loaded in eager-loading.
func (e SpoolVendorEdges) FilamentsOrErr() ([]*Filament, error) {
	if e.loadedTypes[0] {
		return e.Filaments, nil
	}
	return nil, &NotLoadedError{edge: "filaments"}
}

// ExtraOrErr returns the Extra value or an error if the edge
// was not loaded in eager-loading.
func (e SpoolVendorEdges) ExtraOrErr() ([]*VendorField, error) {
	if e.loadedTypes[1] {
		return e.Extra, nil
	}
	return nil, &NotLoadedError{edge: "extra"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpoolVendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spoolvendor.FieldEmptySpoolWeight:
			values[i] = new(sql.NullFloat64)
		case spoolvendor.FieldID:
			values[i] = new(sql.NullInt64)
		case spoolvendor.FieldName, spoolvendor.FieldComment, spoolvendor.FieldExternalID:
			values[i] = new(sql.NullString)
		case spoolvendor.FieldRegistered:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpoolVendor fields.
func (sv *SpoolVendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spoolvendor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = int(value.Int64)
		case spoolvendor.FieldRegistered:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered", values[i])
			} else if value.Valid {
				sv.Registered = value.Time
			}
		case spoolvendor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sv.Name = value.String
			}
		case spoolvendor.FieldEmptySpoolWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field empty_spool_weight", values[i])
			} else if value.Valid {
				sv.EmptySpoolWeight = float32(value.Float64)
			}
		case spoolvendor.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				sv.Comment = value.String
			}
		case spoolvendor.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				sv.ExternalID = value.String
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpoolVendor.
// This includes values selected through modifiers, order, etc.
func (sv *SpoolVendor) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// QueryFilaments queries the "filaments" edge of the SpoolVendor entity.
func (sv *SpoolVendor) QueryFilaments() *FilamentQuery {
	return NewSpoolVendorClient(sv.config).QueryFilaments(sv)
}

// QueryExtra queries the "extra" edge of the SpoolVendor entity.
func (sv *SpoolVendor) QueryExtra() *VendorFieldQuery {
	return NewSpoolVendorClient(sv.config).QueryExtra(sv)
}

// Update returns a builder for updating this SpoolVendor.
// Note that you need to call SpoolVendor.Unwrap() before calling this method if this SpoolVendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SpoolVendor) Update() *SpoolVendorUpdateOne {
	return NewSpoolVendorClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SpoolVendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SpoolVendor) Unwrap() *SpoolVendor {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpoolVendor is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SpoolVendor) String() string {
	var builder strings.Builder
	builder.WriteString("SpoolVendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("registered=")
	builder.WriteString(sv.Registered.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sv.Name)
	builder.WriteString(", ")
	builder.WriteString("empty_spool_weight=")
	builder.WriteString(fmt.Sprintf("%v", sv.EmptySpoolWeight))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(sv.Comment)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(sv.ExternalID)
	builder.WriteByte(')')
	return builder.String()
}

// SpoolVendors is a parsable slice of SpoolVendor.
type SpoolVendors []*SpoolVendor
