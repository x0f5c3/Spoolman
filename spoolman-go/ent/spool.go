// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spoolman-go/ent/filament"
	"spoolman-go/ent/spool"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Spool is the model entity for the Spool schema.
type Spool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Registered holds the value of the "registered" field.
	Registered time.Time `json:"registered,omitempty"`
	// FirstUsed holds the value of the "first_used" field.
	FirstUsed time.Time `json:"first_used,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed time.Time `json:"last_used,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// FilamentID holds the value of the "filament_id" field.
	FilamentID int `json:"filament_id,omitempty"`
	// InitialWeight holds the value of the "initial_weight" field.
	InitialWeight float32 `json:"initial_weight,omitempty"`
	// SpoolWeight holds the value of the "spool_weight" field.
	SpoolWeight float32 `json:"spool_weight,omitempty"`
	// UsedWeight holds the value of the "used_weight" field.
	UsedWeight float32 `json:"used_weight,omitempty"`
	// RemainingWeight holds the value of the "remaining_weight" field.
	RemainingWeight float32 `json:"remaining_weight,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// LotNr holds the value of the "lot_nr" field.
	LotNr string `json:"lot_nr,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpoolQuery when eager-loading is set.
	Edges        SpoolEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SpoolEdges holds the relations/edges for other nodes in the graph.
type SpoolEdges struct {
	// Filament holds the value of the filament edge.
	Filament *Filament `json:"filament,omitempty"`
	// Extra holds the value of the extra edge.
	Extra []*SpoolField `json:"extra,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FilamentOrErr returns the Filament value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpoolEdges) FilamentOrErr() (*Filament, error) {
	if e.Filament != nil {
		return e.Filament, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: filament.Label}
	}
	return nil, &NotLoadedError{edge: "filament"}
}

// ExtraOrErr returns the Extra value or an error if the edge
// was not loaded in eager-loading.
func (e SpoolEdges) ExtraOrErr() ([]*SpoolField, error) {
	if e.loadedTypes[1] {
		return e.Extra, nil
	}
	return nil, &NotLoadedError{edge: "extra"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spool.FieldArchived:
			values[i] = new(sql.NullBool)
		case spool.FieldPrice, spool.FieldInitialWeight, spool.FieldSpoolWeight, spool.FieldUsedWeight, spool.FieldRemainingWeight:
			values[i] = new(sql.NullFloat64)
		case spool.FieldID, spool.FieldFilamentID:
			values[i] = new(sql.NullInt64)
		case spool.FieldLocation, spool.FieldLotNr, spool.FieldComment:
			values[i] = new(sql.NullString)
		case spool.FieldRegistered, spool.FieldFirstUsed, spool.FieldLastUsed:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spool fields.
func (s *Spool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case spool.FieldRegistered:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered", values[i])
			} else if value.Valid {
				s.Registered = value.Time
			}
		case spool.FieldFirstUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_used", values[i])
			} else if value.Valid {
				s.FirstUsed = value.Time
			}
		case spool.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				s.LastUsed = value.Time
			}
		case spool.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = float32(value.Float64)
			}
		case spool.FieldFilamentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field filament_id", values[i])
			} else if value.Valid {
				s.FilamentID = int(value.Int64)
			}
		case spool.FieldInitialWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_weight", values[i])
			} else if value.Valid {
				s.InitialWeight = float32(value.Float64)
			}
		case spool.FieldSpoolWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field spool_weight", values[i])
			} else if value.Valid {
				s.SpoolWeight = float32(value.Float64)
			}
		case spool.FieldUsedWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field used_weight", values[i])
			} else if value.Valid {
				s.UsedWeight = float32(value.Float64)
			}
		case spool.FieldRemainingWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining_weight", values[i])
			} else if value.Valid {
				s.RemainingWeight = float32(value.Float64)
			}
		case spool.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case spool.FieldLotNr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lot_nr", values[i])
			} else if value.Valid {
				s.LotNr = value.String
			}
		case spool.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				s.Comment = value.String
			}
		case spool.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				s.Archived = value.Bool
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Spool.
// This includes values selected through modifiers, order, etc.
func (s *Spool) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryFilament queries the "filament" edge of the Spool entity.
func (s *Spool) QueryFilament() *FilamentQuery {
	return NewSpoolClient(s.config).QueryFilament(s)
}

// QueryExtra queries the "extra" edge of the Spool entity.
func (s *Spool) QueryExtra() *SpoolFieldQuery {
	return NewSpoolClient(s.config).QueryExtra(s)
}

// Update returns a builder for updating this Spool.
// Note that you need to call Spool.Unwrap() before calling this method if this Spool
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spool) Update() *SpoolUpdateOne {
	return NewSpoolClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Spool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Spool) Unwrap() *Spool {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spool is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spool) String() string {
	var builder strings.Builder
	builder.WriteString("Spool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("registered=")
	builder.WriteString(s.Registered.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("first_used=")
	builder.WriteString(s.FirstUsed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(s.LastUsed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", ")
	builder.WriteString("filament_id=")
	builder.WriteString(fmt.Sprintf("%v", s.FilamentID))
	builder.WriteString(", ")
	builder.WriteString("initial_weight=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialWeight))
	builder.WriteString(", ")
	builder.WriteString("spool_weight=")
	builder.WriteString(fmt.Sprintf("%v", s.SpoolWeight))
	builder.WriteString(", ")
	builder.WriteString("used_weight=")
	builder.WriteString(fmt.Sprintf("%v", s.UsedWeight))
	builder.WriteString(", ")
	builder.WriteString("remaining_weight=")
	builder.WriteString(fmt.Sprintf("%v", s.RemainingWeight))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("lot_nr=")
	builder.WriteString(s.LotNr)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(s.Comment)
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", s.Archived))
	builder.WriteByte(')')
	return builder.String()
}

// Spools is a parsable slice of Spool.
type Spools []*Spool
