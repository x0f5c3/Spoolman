// Code generated by ent, DO NOT EDIT.

package spool

import (
	"spoolman-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldID, id))
}

// Registered applies equality check predicate on the "registered" field. It's identical to RegisteredEQ.
func Registered(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldRegistered, v))
}

// FirstUsed applies equality check predicate on the "first_used" field. It's identical to FirstUsedEQ.
func FirstUsed(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldFirstUsed, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLastUsed, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldPrice, v))
}

// FilamentID applies equality check predicate on the "filament_id" field. It's identical to FilamentIDEQ.
func FilamentID(v int) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldFilamentID, v))
}

// InitialWeight applies equality check predicate on the "initial_weight" field. It's identical to InitialWeightEQ.
func InitialWeight(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldInitialWeight, v))
}

// SpoolWeight applies equality check predicate on the "spool_weight" field. It's identical to SpoolWeightEQ.
func SpoolWeight(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldSpoolWeight, v))
}

// UsedWeight applies equality check predicate on the "used_weight" field. It's identical to UsedWeightEQ.
func UsedWeight(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldUsedWeight, v))
}

// RemainingWeight applies equality check predicate on the "remaining_weight" field. It's identical to RemainingWeightEQ.
func RemainingWeight(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldRemainingWeight, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLocation, v))
}

// LotNr applies equality check predicate on the "lot_nr" field. It's identical to LotNrEQ.
func LotNr(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLotNr, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldComment, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldArchived, v))
}

// RegisteredEQ applies the EQ predicate on the "registered" field.
func RegisteredEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldRegistered, v))
}

// RegisteredNEQ applies the NEQ predicate on the "registered" field.
func RegisteredNEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldRegistered, v))
}

// RegisteredIn applies the In predicate on the "registered" field.
func RegisteredIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldRegistered, vs...))
}

// RegisteredNotIn applies the NotIn predicate on the "registered" field.
func RegisteredNotIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldRegistered, vs...))
}

// RegisteredGT applies the GT predicate on the "registered" field.
func RegisteredGT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldRegistered, v))
}

// RegisteredGTE applies the GTE predicate on the "registered" field.
func RegisteredGTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldRegistered, v))
}

// RegisteredLT applies the LT predicate on the "registered" field.
func RegisteredLT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldRegistered, v))
}

// RegisteredLTE applies the LTE predicate on the "registered" field.
func RegisteredLTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldRegistered, v))
}

// FirstUsedEQ applies the EQ predicate on the "first_used" field.
func FirstUsedEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldFirstUsed, v))
}

// FirstUsedNEQ applies the NEQ predicate on the "first_used" field.
func FirstUsedNEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldFirstUsed, v))
}

// FirstUsedIn applies the In predicate on the "first_used" field.
func FirstUsedIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldFirstUsed, vs...))
}

// FirstUsedNotIn applies the NotIn predicate on the "first_used" field.
func FirstUsedNotIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldFirstUsed, vs...))
}

// FirstUsedGT applies the GT predicate on the "first_used" field.
func FirstUsedGT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldFirstUsed, v))
}

// FirstUsedGTE applies the GTE predicate on the "first_used" field.
func FirstUsedGTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldFirstUsed, v))
}

// FirstUsedLT applies the LT predicate on the "first_used" field.
func FirstUsedLT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldFirstUsed, v))
}

// FirstUsedLTE applies the LTE predicate on the "first_used" field.
func FirstUsedLTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldFirstUsed, v))
}

// FirstUsedIsNil applies the IsNil predicate on the "first_used" field.
func FirstUsedIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldFirstUsed))
}

// FirstUsedNotNil applies the NotNil predicate on the "first_used" field.
func FirstUsedNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldFirstUsed))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldLastUsed))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldPrice))
}

// FilamentIDEQ applies the EQ predicate on the "filament_id" field.
func FilamentIDEQ(v int) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldFilamentID, v))
}

// FilamentIDNEQ applies the NEQ predicate on the "filament_id" field.
func FilamentIDNEQ(v int) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldFilamentID, v))
}

// FilamentIDIn applies the In predicate on the "filament_id" field.
func FilamentIDIn(vs ...int) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldFilamentID, vs...))
}

// FilamentIDNotIn applies the NotIn predicate on the "filament_id" field.
func FilamentIDNotIn(vs ...int) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldFilamentID, vs...))
}

// InitialWeightEQ applies the EQ predicate on the "initial_weight" field.
func InitialWeightEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldInitialWeight, v))
}

// InitialWeightNEQ applies the NEQ predicate on the "initial_weight" field.
func InitialWeightNEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldInitialWeight, v))
}

// InitialWeightIn applies the In predicate on the "initial_weight" field.
func InitialWeightIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldInitialWeight, vs...))
}

// InitialWeightNotIn applies the NotIn predicate on the "initial_weight" field.
func InitialWeightNotIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldInitialWeight, vs...))
}

// InitialWeightGT applies the GT predicate on the "initial_weight" field.
func InitialWeightGT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldInitialWeight, v))
}

// InitialWeightGTE applies the GTE predicate on the "initial_weight" field.
func InitialWeightGTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldInitialWeight, v))
}

// InitialWeightLT applies the LT predicate on the "initial_weight" field.
func InitialWeightLT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldInitialWeight, v))
}

// InitialWeightLTE applies the LTE predicate on the "initial_weight" field.
func InitialWeightLTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldInitialWeight, v))
}

// InitialWeightIsNil applies the IsNil predicate on the "initial_weight" field.
func InitialWeightIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldInitialWeight))
}

// InitialWeightNotNil applies the NotNil predicate on the "initial_weight" field.
func InitialWeightNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldInitialWeight))
}

// SpoolWeightEQ applies the EQ predicate on the "spool_weight" field.
func SpoolWeightEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldSpoolWeight, v))
}

// SpoolWeightNEQ applies the NEQ predicate on the "spool_weight" field.
func SpoolWeightNEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldSpoolWeight, v))
}

// SpoolWeightIn applies the In predicate on the "spool_weight" field.
func SpoolWeightIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldSpoolWeight, vs...))
}

// SpoolWeightNotIn applies the NotIn predicate on the "spool_weight" field.
func SpoolWeightNotIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldSpoolWeight, vs...))
}

// SpoolWeightGT applies the GT predicate on the "spool_weight" field.
func SpoolWeightGT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldSpoolWeight, v))
}

// SpoolWeightGTE applies the GTE predicate on the "spool_weight" field.
func SpoolWeightGTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldSpoolWeight, v))
}

// SpoolWeightLT applies the LT predicate on the "spool_weight" field.
func SpoolWeightLT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldSpoolWeight, v))
}

// SpoolWeightLTE applies the LTE predicate on the "spool_weight" field.
func SpoolWeightLTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldSpoolWeight, v))
}

// SpoolWeightIsNil applies the IsNil predicate on the "spool_weight" field.
func SpoolWeightIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldSpoolWeight))
}

// SpoolWeightNotNil applies the NotNil predicate on the "spool_weight" field.
func SpoolWeightNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldSpoolWeight))
}

// UsedWeightEQ applies the EQ predicate on the "used_weight" field.
func UsedWeightEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldUsedWeight, v))
}

// UsedWeightNEQ applies the NEQ predicate on the "used_weight" field.
func UsedWeightNEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldUsedWeight, v))
}

// UsedWeightIn applies the In predicate on the "used_weight" field.
func UsedWeightIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldUsedWeight, vs...))
}

// UsedWeightNotIn applies the NotIn predicate on the "used_weight" field.
func UsedWeightNotIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldUsedWeight, vs...))
}

// UsedWeightGT applies the GT predicate on the "used_weight" field.
func UsedWeightGT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldUsedWeight, v))
}

// UsedWeightGTE applies the GTE predicate on the "used_weight" field.
func UsedWeightGTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldUsedWeight, v))
}

// UsedWeightLT applies the LT predicate on the "used_weight" field.
func UsedWeightLT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldUsedWeight, v))
}

// UsedWeightLTE applies the LTE predicate on the "used_weight" field.
func UsedWeightLTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldUsedWeight, v))
}

// RemainingWeightEQ applies the EQ predicate on the "remaining_weight" field.
func RemainingWeightEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldRemainingWeight, v))
}

// RemainingWeightNEQ applies the NEQ predicate on the "remaining_weight" field.
func RemainingWeightNEQ(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldRemainingWeight, v))
}

// RemainingWeightIn applies the In predicate on the "remaining_weight" field.
func RemainingWeightIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldRemainingWeight, vs...))
}

// RemainingWeightNotIn applies the NotIn predicate on the "remaining_weight" field.
func RemainingWeightNotIn(vs ...float32) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldRemainingWeight, vs...))
}

// RemainingWeightGT applies the GT predicate on the "remaining_weight" field.
func RemainingWeightGT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldRemainingWeight, v))
}

// RemainingWeightGTE applies the GTE predicate on the "remaining_weight" field.
func RemainingWeightGTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldRemainingWeight, v))
}

// RemainingWeightLT applies the LT predicate on the "remaining_weight" field.
func RemainingWeightLT(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldRemainingWeight, v))
}

// RemainingWeightLTE applies the LTE predicate on the "remaining_weight" field.
func RemainingWeightLTE(v float32) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldRemainingWeight, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContainsFold(FieldLocation, v))
}

// LotNrEQ applies the EQ predicate on the "lot_nr" field.
func LotNrEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldLotNr, v))
}

// LotNrNEQ applies the NEQ predicate on the "lot_nr" field.
func LotNrNEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldLotNr, v))
}

// LotNrIn applies the In predicate on the "lot_nr" field.
func LotNrIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldLotNr, vs...))
}

// LotNrNotIn applies the NotIn predicate on the "lot_nr" field.
func LotNrNotIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldLotNr, vs...))
}

// LotNrGT applies the GT predicate on the "lot_nr" field.
func LotNrGT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldLotNr, v))
}

// LotNrGTE applies the GTE predicate on the "lot_nr" field.
func LotNrGTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldLotNr, v))
}

// LotNrLT applies the LT predicate on the "lot_nr" field.
func LotNrLT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldLotNr, v))
}

// LotNrLTE applies the LTE predicate on the "lot_nr" field.
func LotNrLTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldLotNr, v))
}

// LotNrContains applies the Contains predicate on the "lot_nr" field.
func LotNrContains(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContains(FieldLotNr, v))
}

// LotNrHasPrefix applies the HasPrefix predicate on the "lot_nr" field.
func LotNrHasPrefix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasPrefix(FieldLotNr, v))
}

// LotNrHasSuffix applies the HasSuffix predicate on the "lot_nr" field.
func LotNrHasSuffix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasSuffix(FieldLotNr, v))
}

// LotNrIsNil applies the IsNil predicate on the "lot_nr" field.
func LotNrIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldLotNr))
}

// LotNrNotNil applies the NotNil predicate on the "lot_nr" field.
func LotNrNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldLotNr))
}

// LotNrEqualFold applies the EqualFold predicate on the "lot_nr" field.
func LotNrEqualFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEqualFold(FieldLotNr, v))
}

// LotNrContainsFold applies the ContainsFold predicate on the "lot_nr" field.
func LotNrContainsFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContainsFold(FieldLotNr, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Spool {
	return predicate.Spool(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Spool {
	return predicate.Spool(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Spool {
	return predicate.Spool(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Spool {
	return predicate.Spool(sql.FieldContainsFold(FieldComment, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.Spool {
	return predicate.Spool(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.Spool {
	return predicate.Spool(sql.FieldNEQ(FieldArchived, v))
}

// ArchivedIsNil applies the IsNil predicate on the "archived" field.
func ArchivedIsNil() predicate.Spool {
	return predicate.Spool(sql.FieldIsNull(FieldArchived))
}

// ArchivedNotNil applies the NotNil predicate on the "archived" field.
func ArchivedNotNil() predicate.Spool {
	return predicate.Spool(sql.FieldNotNull(FieldArchived))
}

// HasFilament applies the HasEdge predicate on the "filament" edge.
func HasFilament() predicate.Spool {
	return predicate.Spool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FilamentTable, FilamentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilamentWith applies the HasEdge predicate on the "filament" edge with a given conditions (other predicates).
func HasFilamentWith(preds ...predicate.Filament) predicate.Spool {
	return predicate.Spool(func(s *sql.Selector) {
		step := newFilamentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtra applies the HasEdge predicate on the "extra" edge.
func HasExtra() predicate.Spool {
	return predicate.Spool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExtraTable, ExtraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtraWith applies the HasEdge predicate on the "extra" edge with a given conditions (other predicates).
func HasExtraWith(preds ...predicate.SpoolField) predicate.Spool {
	return predicate.Spool(func(s *sql.Selector) {
		step := newExtraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Spool) predicate.Spool {
	return predicate.Spool(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Spool) predicate.Spool {
	return predicate.Spool(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Spool) predicate.Spool {
	return predicate.Spool(sql.NotPredicates(p))
}
