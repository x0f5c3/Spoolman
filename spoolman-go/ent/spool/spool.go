// Code generated by ent, DO NOT EDIT.

package spool

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the spool type in the database.
	Label = "spool"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRegistered holds the string denoting the registered field in the database.
	FieldRegistered = "registered"
	// FieldFirstUsed holds the string denoting the first_used field in the database.
	FieldFirstUsed = "first_used"
	// FieldLastUsed holds the string denoting the last_used field in the database.
	FieldLastUsed = "last_used"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldFilamentID holds the string denoting the filament_id field in the database.
	FieldFilamentID = "filament_id"
	// FieldInitialWeight holds the string denoting the initial_weight field in the database.
	FieldInitialWeight = "initial_weight"
	// FieldSpoolWeight holds the string denoting the spool_weight field in the database.
	FieldSpoolWeight = "spool_weight"
	// FieldUsedWeight holds the string denoting the used_weight field in the database.
	FieldUsedWeight = "used_weight"
	// FieldRemainingWeight holds the string denoting the remaining_weight field in the database.
	FieldRemainingWeight = "remaining_weight"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldLotNr holds the string denoting the lot_nr field in the database.
	FieldLotNr = "lot_nr"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// EdgeFilament holds the string denoting the filament edge name in mutations.
	EdgeFilament = "filament"
	// EdgeExtra holds the string denoting the extra edge name in mutations.
	EdgeExtra = "extra"
	// Table holds the table name of the spool in the database.
	Table = "spools"
	// FilamentTable is the table that holds the filament relation/edge.
	FilamentTable = "spools"
	// FilamentInverseTable is the table name for the Filament entity.
	// It exists in this package in order to avoid circular dependency with the "filament" package.
	FilamentInverseTable = "filaments"
	// FilamentColumn is the table column denoting the filament relation/edge.
	FilamentColumn = "filament_id"
	// ExtraTable is the table that holds the extra relation/edge.
	ExtraTable = "spool_fields"
	// ExtraInverseTable is the table name for the SpoolField entity.
	// It exists in this package in order to avoid circular dependency with the "spoolfield" package.
	ExtraInverseTable = "spool_fields"
	// ExtraColumn is the table column denoting the extra relation/edge.
	ExtraColumn = "spool_id"
)

// Columns holds all SQL columns for spool fields.
var Columns = []string{
	FieldID,
	FieldRegistered,
	FieldFirstUsed,
	FieldLastUsed,
	FieldPrice,
	FieldFilamentID,
	FieldInitialWeight,
	FieldSpoolWeight,
	FieldUsedWeight,
	FieldRemainingWeight,
	FieldLocation,
	FieldLotNr,
	FieldComment,
	FieldArchived,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RemainingWeightValidator is a validator for the "remaining_weight" field. It is called by the builders before save.
	RemainingWeightValidator func(float32) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// LotNrValidator is a validator for the "lot_nr" field. It is called by the builders before save.
	LotNrValidator func(string) error
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Spool queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRegistered orders the results by the registered field.
func ByRegistered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistered, opts...).ToFunc()
}

// ByFirstUsed orders the results by the first_used field.
func ByFirstUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstUsed, opts...).ToFunc()
}

// ByLastUsed orders the results by the last_used field.
func ByLastUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsed, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByFilamentID orders the results by the filament_id field.
func ByFilamentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilamentID, opts...).ToFunc()
}

// ByInitialWeight orders the results by the initial_weight field.
func ByInitialWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialWeight, opts...).ToFunc()
}

// BySpoolWeight orders the results by the spool_weight field.
func BySpoolWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpoolWeight, opts...).ToFunc()
}

// ByUsedWeight orders the results by the used_weight field.
func ByUsedWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedWeight, opts...).ToFunc()
}

// ByRemainingWeight orders the results by the remaining_weight field.
func ByRemainingWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingWeight, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByLotNr orders the results by the lot_nr field.
func ByLotNr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLotNr, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByFilamentField orders the results by filament field.
func ByFilamentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilamentStep(), sql.OrderByField(field, opts...))
	}
}

// ByExtraCount orders the results by extra count.
func ByExtraCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExtraStep(), opts...)
	}
}

// ByExtra orders the results by extra terms.
func ByExtra(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtraStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFilamentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilamentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FilamentTable, FilamentColumn),
	)
}
func newExtraStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtraInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExtraTable, ExtraColumn),
	)
}
