// Code generated by ent, DO NOT EDIT.

package vendorfield

import (
	"spoolman-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VendorField {
	return predicate.VendorField(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VendorField {
	return predicate.VendorField(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VendorField {
	return predicate.VendorField(sql.FieldLTE(FieldID, id))
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v int) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldVendorID, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldKey, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldValue, v))
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v int) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldVendorID, v))
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v int) predicate.VendorField {
	return predicate.VendorField(sql.FieldNEQ(FieldVendorID, v))
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...int) predicate.VendorField {
	return predicate.VendorField(sql.FieldIn(FieldVendorID, vs...))
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...int) predicate.VendorField {
	return predicate.VendorField(sql.FieldNotIn(FieldVendorID, vs...))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.VendorField {
	return predicate.VendorField(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.VendorField {
	return predicate.VendorField(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldContainsFold(FieldKey, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.VendorField {
	return predicate.VendorField(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.VendorField {
	return predicate.VendorField(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.VendorField {
	return predicate.VendorField(sql.FieldContainsFold(FieldValue, v))
}

// HasVendor applies the HasEdge predicate on the "vendor" edge.
func HasVendor() predicate.VendorField {
	return predicate.VendorField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorWith applies the HasEdge predicate on the "vendor" edge with a given conditions (other predicates).
func HasVendorWith(preds ...predicate.SpoolVendor) predicate.VendorField {
	return predicate.VendorField(func(s *sql.Selector) {
		step := newVendorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VendorField) predicate.VendorField {
	return predicate.VendorField(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VendorField) predicate.VendorField {
	return predicate.VendorField(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VendorField) predicate.VendorField {
	return predicate.VendorField(sql.NotPredicates(p))
}
